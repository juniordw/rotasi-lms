==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\hasil.txt ==== 
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\hasil.txt ==== 
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\middleware.ts ==== 
// src/middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // Get token from cookies
  const token = request.cookies.get('accessToken')?.value;
  
  // Current URL pathname
  const { pathname } = request.nextUrl;
  
  // Define route protection rules
  const protectedPaths = [
    '/dashboard', 
    '/courses/enrolled',
    '/settings'
  ];
  
  // Paths only for non-authenticated users
  const publicOnlyPaths = ['/login', '/register', '/forgot-password'];

  // Admin-only paths
  const adminPaths = [
    '/dashboard/admin',
    '/dashboard/users',
    '/dashboard/categories'
  ];

  // Instructor-only paths
  const instructorPaths = [
    '/dashboard/courses/create',
    '/dashboard/courses/manage',
    '/dashboard/students',
    '/dashboard/analytics'
  ];

  // Check if current path requires authentication
  const isProtectedPath = protectedPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  );
  
  // Check if current path is for non-authenticated users only
  const isPublicOnlyPath = publicOnlyPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  );

  // Check for admin-specific paths
  const isAdminPath = adminPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  );

  // Check for instructor-specific paths
  const isInstructorPath = instructorPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  );

  // If trying to access protected route without token, redirect to login
  if (isProtectedPath && !token) {
    return NextResponse.redirect(new URL('/login', request.url));
  }
  
  // If logged in and trying to access login/register, redirect to dashboard
  if (isPublicOnlyPath && token) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }
  
  // For role-based access, would ideally check user role from token claims
  // This is a simplified version - in production you'd decode the JWT to check user role
  
  // If no issues, proceed with the request
  return NextResponse.next();
}

// Define which paths should be handled by this middleware
export const config = {
  matcher: [
    '/dashboard/:path*',
    '/login',
    '/register',
    '/forgot-password',
    '/courses/:path*',
    '/settings/:path*'
  ],
};==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\globals.css ==== 
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    @apply scroll-smooth;
  }

  body {
    @apply bg-white text-neutral-900 dark:bg-neutral-900 dark:text-neutral-50;
  }

  /* Dialog styling for video modal */
  dialog {
    @apply backdrop:bg-neutral-900/50;
  }

  dialog::backdrop {
    @apply backdrop-blur-sm;
  }
}

@layer utilities {
  .animate-in {
    animation: animateIn 0.3s ease-in-out;
  }

  .slide-in-from-right {
    animation: slideInFromRight 0.3s ease-in-out;
  }
}

@keyframes animateIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Add this to your existing globals.css */
html {
  transition: background-color 0.3s ease, color 0.3s ease;
}

body {
  transition: background-color 0.3s ease, color 0.3s ease;
}

*, *::before, *::after {
  transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
}

/* Smooth theme transitions */
html.transitioning,
html.transitioning *,
html.transitioning *:before,
html.transitioning *:after {
  transition: all 0.3s ease-in-out !important;
  transition-delay: 0 !important;
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\layout.tsx ==== 
import './globals.css'
import type { Metadata } from 'next'
import Providers from './providers'

export const metadata: Metadata = {
  title: 'ROTASI - Repositori Online untuk Pelatihan dan Informasi',
  description: 'Platform pembelajaran yang komprehensif dengan akses ke kursus berkualitas tinggi dan fitur pembelajaran interaktif',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  // This prevents hydration mismatch by not adding dark class during SSR
  return (
    <html lang="id" suppressHydrationWarning>
      <body suppressHydrationWarning>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  )
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\page.tsx ==== 
'use client';

import HeroSection from '@/components/sections/HeroSection';
import FeaturesSection from '@/components/sections/FeaturesSection';
import CoursesSection from '@/components/sections/CoursesSection'; 
import TestimonialsSection from '@/components/sections/TestimonialsSection';
import CtaSection from '@/components/sections/CtaSection';
import MainLayout from '@/components/layout/MainLayout';

// Import font CSS
import '@fontsource/inter/400.css';
import '@fontsource/inter/500.css';
import '@fontsource/inter/600.css';
import '@fontsource/inter/700.css';
import '@fontsource/poppins/600.css';
import '@fontsource/poppins/700.css';

export default function Home() {
  return (
    <MainLayout>
      <HeroSection />
      <FeaturesSection />
      <CoursesSection />
      <TestimonialsSection />
      <CtaSection />
    </MainLayout>
  );
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\providers.tsx ==== 
// src/app/providers.tsx
'use client';

import { Provider } from 'react-redux';
import { store } from '@/redux/store';
import { QueryClientProvider } from '@tanstack/react-query';
import { queryClient } from '@/lib/reactQuery';
import { ToastProvider } from '@/components/ui/Toaster';
import ThemeProvider from '@/components/ThemeProvider';
import { AuthProvider } from '@/contexts/AuthContext';

export default function Providers({ children }: { children: React.ReactNode }) {
  return (
    <QueryClientProvider client={queryClient}>
      <Provider store={store}>
        <ToastProvider>
          <ThemeProvider />
          <AuthProvider>
            {children}
          </AuthProvider>
        </ToastProvider>
      </Provider>
    </QueryClientProvider>
  );
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\courses\[id]\page.tsx ==== 
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import MainLayout from "@/components/layout/MainLayout";
import Button from "@/components/ui/Button";
import { useToast } from "@/components/ui/Toaster";
import {
  FiClock,
  FiUsers,
  FiBarChart2,
  FiCheckCircle,
  FiUser,
  FiLayers,
  FiPlay,
} from "react-icons/fi";

export default function CourseDetailPage({
  params,
}: {
  params: { id: string };
}) {
  const router = useRouter();
  const { showToast } = useToast();
  const [course, setCourse] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("overview");
  const [isEnrolling, setIsEnrolling] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const fetchCourseData = async () => {
      try {
        const response = await fetch(
          `http://localhost:5000/api/courses/${params.id}`
        );

        if (!response.ok) {
          throw new Error("Failed to fetch course data");
        }

        const data = await response.json();
        setCourse(data.data);

        // Check if user is authenticated
        const token = localStorage.getItem("accessToken");
        setIsAuthenticated(!!token);
      } catch (error) {
        console.error("Course data fetch error:", error);
        showToast("Error loading course data", "error");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCourseData();
  }, [params.id, showToast]);

  const handleEnroll = async () => {
    if (!isAuthenticated) {
      router.push("/login");
      return;
    }

    try {
      setIsEnrolling(true);
      const token = localStorage.getItem("accessToken");

      const response = await fetch(
        `http://localhost:5000/api/courses/${params.id}/enroll`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      const data = await response.json();

      if (response.ok) {
        showToast("Berhasil mendaftar ke kursus!", "success");
        router.push(`/dashboard/courses/${params.id}`);
      } else {
        showToast(data.message || "Gagal mendaftar ke kursus", "error");
      }
    } catch (error) {
      console.error("Enrollment error:", error);
      showToast("Terjadi kesalahan saat mendaftar", "error");
    } finally {
      setIsEnrolling(false);
    }
  };

  if (isLoading) {
    return (
      <MainLayout>
        <div className="flex min-h-screen items-center justify-center">
          <div className="h-10 w-10 animate-spin rounded-full border-2 border-primary-400 border-t-transparent"></div>
        </div>
      </MainLayout>
    );
  }

  if (!course) {
    return (
      <MainLayout>
        <div className="container mx-auto px-4 py-16 text-center md:px-8">
          <h1 className="mb-4 text-2xl font-bold">Kursus tidak ditemukan</h1>
          <p className="mb-8">
            Kursus yang Anda cari tidak tersedia atau telah dihapus.
          </p>
          <Link href="/courses">
            <Button>Jelajahi Kursus Lainnya</Button>
          </Link>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      {/* Hero Section */}
      <section className="bg-gradient-to-b from-primary-50 to-white py-12 dark:from-neutral-800 dark:to-neutral-900">
        <div className="container mx-auto px-4 md:px-8">
          <div className="grid gap-8 lg:grid-cols-2">
            <div>
              <h1 className="mb-4 font-poppins text-3xl font-bold md:text-4xl">
                {course.title}
              </h1>
              <p className="mb-6 text-lg text-neutral-600 dark:text-neutral-300">
                {course.description}
              </p>

              <div className="mb-6 flex flex-wrap gap-4">
                <div className="flex items-center text-sm text-neutral-600 dark:text-neutral-400">
                  <FiUser className="mr-1" />
                  <span>
                    Instruktur:{" "}
                    <span className="font-medium text-neutral-900 dark:text-white">
                      {course.instructor.full_name}
                    </span>
                  </span>
                </div>
                <div className="flex items-center text-sm text-neutral-600 dark:text-neutral-400">
                  <FiClock className="mr-1" />
                  <span>
                    Durasi:{" "}
                    <span className="font-medium text-neutral-900 dark:text-white">
                      {course.duration_hours || 0} jam
                    </span>
                  </span>
                </div>
                <div className="flex items-center text-sm text-neutral-600 dark:text-neutral-400">
                  <FiUsers className="mr-1" />
                  <span>
                    Siswa:{" "}
                    <span className="font-medium text-neutral-900 dark:text-white">
                      {course.enrollmentCount || 0}
                    </span>
                  </span>
                </div>
                <div className="flex items-center text-sm text-neutral-600 dark:text-neutral-400">
                  <FiBarChart2 className="mr-1" />
                  <span>
                    Level:{" "}
                    <span className="font-medium text-neutral-900 dark:text-white">
                      {course.level || "Pemula"}
                    </span>
                  </span>
                </div>
              </div>

              {course.enrollmentStatus?.enrolled ? (
                <Link href={`/dashboard/courses/${course.id}`}>
                  <Button size="lg" className="rounded-xl">
                    <FiPlay className="mr-2" /> Lanjutkan Belajar
                  </Button>
                </Link>
              ) : (
                <Button
                  size="lg"
                  className="rounded-xl"
                  onClick={handleEnroll}
                  disabled={isEnrolling}
                >
                  {isEnrolling ? "Mendaftar..." : "Daftar Kursus"}
                </Button>
              )}
            </div>

            <div className="relative h-64 overflow-hidden rounded-xl shadow-lg sm:h-80 lg:h-96">
              <Image
                src={course.thumbnail_url || "/images/course-placeholder.jpg"}
                alt={course.title}
                className="h-full w-full object-cover"
                fill
              />
            </div>
          </div>
        </div>
      </section>

      {/* Course Content Section */}
      <section className="py-12">
        <div className="container mx-auto px-4 md:px-8">
          <div className="mb-8 border-b border-neutral-200 dark:border-neutral-700">
            <div className="flex flex-wrap">
              <button
                onClick={() => setActiveTab("overview")}
                className={`mr-8 border-b-2 px-1 pb-4 text-sm font-medium sm:text-base ${
                  activeTab === "overview"
                    ? "border-primary-400 text-primary-500"
                    : "border-transparent text-neutral-500 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300"
                }`}
              >
                Ikhtisar
              </button>
              <button
                onClick={() => setActiveTab("curriculum")}
                className={`mr-8 border-b-2 px-1 pb-4 text-sm font-medium sm:text-base ${
                  activeTab === "curriculum"
                    ? "border-primary-400 text-primary-500"
                    : "border-transparent text-neutral-500 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300"
                }`}
              >
                Materi Kursus
              </button>
              <button
                onClick={() => setActiveTab("instructor")}
                className={`mr-8 border-b-2 px-1 pb-4 text-sm font-medium sm:text-base ${
                  activeTab === "instructor"
                    ? "border-primary-400 text-primary-500"
                    : "border-transparent text-neutral-500 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300"
                }`}
              >
                Instruktur
              </button>
            </div>
          </div>

          {activeTab === "overview" && (
            <div className="grid gap-8 lg:grid-cols-3">
              <div className="lg:col-span-2">
                <h2 className="mb-4 text-2xl font-bold">Tentang Kursus</h2>
                <div className="prose max-w-none dark:prose-invert">
                  <p>{course.description}</p>
                </div>

                <h3 className="mb-3 mt-8 text-xl font-bold">
                  Apa yang akan Anda pelajari
                </h3>
                <ul className="space-y-2 text-neutral-700 dark:text-neutral-300">
                  {course.modules &&
                    course.modules.slice(0, 4).map((module: any) => (
                      <li key={module.id} className="flex items-start">
                        <FiCheckCircle className="mr-2 mt-1 text-primary-400" />
                        <span>{module.title}</span>
                      </li>
                    ))}
                </ul>
              </div>

              <div>
                <div className="rounded-lg border border-neutral-200 bg-white p-6 shadow-sm dark:border-neutral-700 dark:bg-neutral-800">
                  <h3 className="mb-4 text-lg font-semibold">
                    Kursus ini mencakup:
                  </h3>
                  <ul className="space-y-3">
                    <li className="flex items-center">
                      <FiClock className="mr-2 text-primary-400" />
                      <span>{course.duration_hours || 0} jam konten video</span>
                    </li>
                    <li className="flex items-center">
                      <FiLayers className="mr-2 text-primary-400" />
                      <span>{course.modules?.length || 0} modul</span>
                    </li>
                    <li className="flex items-center">
                      <FiBarChart2 className="mr-2 text-primary-400" />
                      <span>Level {course.level || "Pemula"}</span>
                    </li>
                    <li className="flex items-center">
                      <FiUsers className="mr-2 text-primary-400" />
                      <span>{course.enrollmentCount || 0} siswa terdaftar</span>
                    </li>
                  </ul>

                  <div className="mt-6">
                    {course.enrollmentStatus?.enrolled ? (
                      <Link href={`/dashboard/courses/${course.id}`}>
                        <Button
                          variant="primary"
                          fullWidth
                          className="rounded-lg"
                        >
                          <FiPlay className="mr-2" /> Lanjutkan Belajar
                        </Button>
                      </Link>
                    ) : (
                      <Button
                        variant="primary"
                        fullWidth
                        className="rounded-lg"
                        onClick={handleEnroll}
                        disabled={isEnrolling}
                      >
                        {isEnrolling ? "Mendaftar..." : "Daftar Kursus"}
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === "curriculum" && (
            <div>
              <h2 className="mb-6 text-2xl font-bold">Materi Kursus</h2>

              {course.modules && course.modules.length > 0 ? (
                <div className="space-y-4">
                  {course.modules.map((module: any, index: number) => (
                    <div
                      key={module.id}
                      className="rounded-lg border border-neutral-200 bg-white overflow-hidden dark:border-neutral-700 dark:bg-neutral-800"
                    >
                      <div className="flex items-center justify-between border-b border-neutral-200 bg-neutral-50 p-4 dark:border-neutral-700 dark:bg-neutral-800/50">
                        <h3 className="font-semibold">
                          Modul {index + 1}: {module.title}
                        </h3>
                        <span className="text-sm text-neutral-500 dark:text-neutral-400">
                          {module.lessons?.length || 0} materi
                        </span>
                      </div>

                      {module.lessons && module.lessons.length > 0 ? (
                        <ul>
                          {module.lessons.map(
                            (lesson: any, lessonIndex: number) => (
                              <li
                                key={lesson.id}
                                className={`border-b border-neutral-200 p-4 last:border-b-0 dark:border-neutral-700 ${
                                  lessonIndex % 2 !== 0
                                    ? "bg-neutral-50 dark:bg-neutral-800/30"
                                    : ""
                                }`}
                              >
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center">
                                    {lesson.content_type === "video" && (
                                      <FiPlay className="mr-2 text-primary-400" />
                                    )}
                                    {lesson.content_type === "quiz" && (
                                      <FiBarChart2 className="mr-2 text-coral-400" />
                                    )}
                                    {lesson.content_type === "article" && (
                                      <FiLayers className="mr-2 text-mint-400" />
                                    )}
                                    <span>{lesson.title}</span>
                                  </div>
                                  <span className="text-sm text-neutral-500 dark:text-neutral-400">
                                    {lesson.duration_minutes} menit
                                  </span>
                                </div>
                              </li>
                            )
                          )}
                        </ul>
                      ) : (
                        <p className="p-4 text-neutral-500 dark:text-neutral-400">
                          Tidak ada materi dalam modul ini
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-neutral-500 dark:text-neutral-400">
                  Tidak ada materi yang tersedia untuk kursus ini
                </p>
              )}
            </div>
          )}

          {activeTab === "instructor" && (
            <div>
              <div className="flex flex-col items-center space-y-4 sm:flex-row sm:items-start sm:space-x-6 sm:space-y-0">
                <div className="h-24 w-24 overflow-hidden rounded-full">
                  <Image
                    src={
                      course.instructor.avatar_url ||
                      "/images/avatar-placeholder.jpg"
                    }
                    alt={course.instructor.full_name}
                    width={96}
                    height={96}
                    className="h-full w-full object-cover"
                  />
                </div>
                <div>
                  <h2 className="mb-2 text-2xl font-bold">
                    {course.instructor.full_name}
                  </h2>
                  <p className="mb-4 text-neutral-600 dark:text-neutral-300">
                    {course.instructor.role === "instructor"
                      ? "Instruktur"
                      : "Admin"}
                  </p>
                  <p className="text-neutral-600 dark:text-neutral-300">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                    Nullam in metus euismod, elementum nunc vel, feugiat magna.
                    Suspendisse potenti. In ut lectus nec nisi malesuada varius
                    ac ut diam.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </section>

      {/* Related Courses Section */}
      <section className="bg-neutral-50 py-12 dark:bg-neutral-800/30">
        <div className="container mx-auto px-4 md:px-8">
          <h2 className="mb-8 text-2xl font-bold">Kursus Serupa</h2>

          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-4">
            {[1, 2, 3, 4].map((i) => (
              <div
                key={i}
                className="overflow-hidden rounded-lg bg-white shadow-sm transition-all hover:shadow-md dark:bg-neutral-800"
              >
                <div className="relative h-40">
                  <div className="absolute inset-0 bg-neutral-200 dark:bg-neutral-700"></div>
                </div>
                <div className="p-4">
                  <h3 className="mb-2 font-semibold">Kursus Placeholder</h3>
                  <p className="mb-4 text-sm text-neutral-500 dark:text-neutral-400">
                    Lorem ipsum dolor sit amet consectetur adipisicing elit.
                  </p>
                  <Button variant="outline" fullWidth>
                    Lihat Detail
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
    </MainLayout>
  );
}
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\dashboard\page.tsx ==== 
// src/app/dashboard/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import DashboardLayout from "@/components/layout/DashboardLayout";
import StatCard from "@/components/ui/StatCard";
import CourseCard from "@/components/course/CourseCard";
import EmptyState from "@/components/ui/EmptyState";
import { useToast } from "@/components/ui/Toaster";
import LoadingIndicator from "@/components/ui/LoadingIndicator";
import NotificationList from "@/components/notifications/NotificationList";
import { useDashboardData } from "@/hooks/api/useDashboardData";
import { useAuth } from "@/contexts/AuthContext";
import {
  FiBook,
  FiClock,
  FiAward,
  FiBarChart2,
  FiUsers,
  FiAlertCircle,
} from "react-icons/fi";
import Button from "@/components/ui/Button";

export default function DashboardPage() {
  const router = useRouter();
  const { showToast } = useToast();
  const { user: authUser } = useAuth();
  const [error, setError] = useState("");

  // Use custom hook for fetching dashboard data
  const { 
    user, 
    dashboardStats, 
    enrolledCourses, 
    notifications, 
    isLoading, 
    refetchDashboardData 
  } = useDashboardData(authUser);

  // Helper function to determine button target based on user role
  const getPrimaryActionTarget = () => {
    if (!user) return "/";
    
    if (user.role === "student") {
      return "/courses";
    } else if (user.role === "instructor") {
      return "/dashboard/courses/create";
    } else {
      return "/dashboard/reports";
    }
  };

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="flex h-full items-center justify-center">
          <LoadingIndicator size="md" />
        </div>
      </DashboardLayout>
    );
  }

  if (error) {
    return (
      <DashboardLayout>
        <div className="flex h-full flex-col items-center justify-center p-6">
          <div className="mb-4 rounded-full bg-red-100 p-3 text-red-500 dark:bg-red-900/20">
            <FiAlertCircle size={32} />
          </div>
          <h2 className="mb-2 text-xl font-bold">{error}</h2>
          <p className="mb-4 text-center text-neutral-600 dark:text-neutral-400">
            Silakan muat ulang halaman atau coba lagi nanti.
          </p>
          <Button onClick={() => window.location.reload()}>Muat Ulang</Button>
        </div>
      </DashboardLayout>
    );
  }

  if (!user) return null;

  return (
    <DashboardLayout>
      <div className="space-y-6 p-6">
        {/* Welcome Banner */}
        <div className="flex flex-col items-start justify-between gap-4 rounded-xl bg-gradient-to-r from-primary-500 to-primary-600 p-6 text-white sm:flex-row sm:items-center">
          <div>
            <h1 className="text-2xl font-bold">
              Selamat datang, {user.full_name}!
            </h1>
            <p className="text-primary-50">
              {user.role === "student"
                ? "Lanjutkan pembelajaran Anda hari ini"
                : user.role === "instructor"
                  ? "Kelola kursus dan pantau progress siswa Anda"
                  : "Akses panel admin dan kelola seluruh sistem"}
            </p>
          </div>
          <Link href={getPrimaryActionTarget()}>
            <Button
              variant="ghost"
              className="border border-white bg-white/10 text-white hover:bg-white/20"
            >
              {user.role === "student"
                ? "Jelajahi Kursus"
                : user.role === "instructor"
                  ? "Buat Kursus Baru"
                  : "Lihat Laporan"}
            </Button>
          </Link>
        </div>

        {/* Stats Section */}
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
          {user.role === "student" && (
            <>
              <StatCard
                icon={<FiBook className="text-primary-400" />}
                title="Kursus Diikuti"
                value={
                  dashboardStats.courseStats?.totalEnrollments ||
                  enrolledCourses.length ||
                  0
                }
              />
              <StatCard
                icon={<FiClock className="text-coral-400" />}
                title="Waktu Belajar"
                value={`${dashboardStats.studyStats?.totalStudyTimeHours || 0} jam`}
              />
              <StatCard
                icon={<FiAward className="text-mint-400" />}
                title="Sertifikat"
                value={dashboardStats.certificateStats?.totalCertificates || 0}
              />
              <StatCard
                icon={<FiBarChart2 className="text-amber-400" />}
                title="Progress"
                value={`${dashboardStats.courseStats?.completionRate || 0}%`}
              />
            </>
          )}

          {user.role === "instructor" && (
            <>
              <StatCard
                icon={<FiBook className="text-primary-400" />}
                title="Kursus Dibuat"
                value={dashboardStats.courseStats?.totalCourses || 0}
              />
              <StatCard
                icon={<FiBarChart2 className="text-coral-400" />}
                title="Kursus Dipublish"
                value={dashboardStats.courseStats?.publishedCourses || 0}
              />
              <StatCard
                icon={<FiUsers className="text-mint-400" />}
                title="Total Siswa"
                value={dashboardStats.studentStats?.totalStudents || 0}
              />
              <StatCard
                icon={<FiAward className="text-amber-400" />}
                title="Rate Penyelesaian"
                value={`${dashboardStats.courseStats?.completionRate || 0}%`}
              />
            </>
          )}

          {user.role === "admin" && (
            <>
              <StatCard
                icon={<FiUsers className="text-primary-400" />}
                title="Total Pengguna"
                value={dashboardStats.userStats?.totalUsers || 0}
              />
              <StatCard
                icon={<FiBook className="text-coral-400" />}
                title="Total Kursus"
                value={dashboardStats.courseStats?.totalCourses || 0}
              />
              <StatCard
                icon={<FiBarChart2 className="text-mint-400" />}
                title="Total Pendaftaran"
                value={dashboardStats.enrollmentStats?.totalEnrollments || 0}
              />
              <StatCard
                icon={<FiAward className="text-amber-400" />}
                title="Instruktur"
                value={dashboardStats.userStats?.roleCount?.instructor || 0}
              />
            </>
          )}
        </div>

        {/* Courses Section */}
        <div>
          <div className="mb-4 flex items-center justify-between">
            <h2 className="text-xl font-bold">
              {user.role === "student"
                ? "Kursus yang Diikuti"
                : "Kursus yang Dikelola"}
            </h2>
            <Link href="/dashboard/courses">
              <Button variant="outline" size="sm">
                Lihat Semua
              </Button>
            </Link>
          </div>

          {enrolledCourses.length > 0 ? (
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
              {enrolledCourses.slice(0, 3).map((course) => (
                <CourseCard
                  key={course.id || course.course_id}
                  course={course}
                  userRole={user.role}
                />
              ))}
            </div>
          ) : (
            <EmptyState
              icon={<FiBook size={40} />}
              title="Belum ada kursus"
              description={
                user.role === "student"
                  ? "Anda belum mengikuti kursus apapun. Jelajahi katalog kursus kami untuk mulai belajar."
                  : "Anda belum membuat kursus apapun. Mulai buat kursus pertama Anda sekarang."
              }
              actionLabel={user.role === "student" ? "Jelajahi Kursus" : "Buat Kursus"}
              actionLink={
                user.role === "student"
                  ? "/courses"
                  : "/dashboard/courses/create"
              }
            />
          )}
        </div>

        {/* Recent Activity / Notifications */}
        <div>
          <h2 className="mb-4 text-xl font-bold">Aktivitas Terbaru</h2>
          <NotificationList 
            notifications={notifications} 
            emptyMessage="Belum ada aktivitas terbaru" 
          />
        </div>
      </div>
    </DashboardLayout>
  );
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\dashboard\courses\index.tsx ==== 
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import DashboardLayout from "@/components/layout/DashboardLayout";
import Button from "@/components/ui/Button";
import { useToast } from "@/components/ui/Toaster";
import { FiSearch, FiFilter, FiGrid, FiList, FiPlus, FiClock, FiUsers, FiBarChart2, FiBook } from "react-icons/fi";

export default function CoursesPage() {
  const router = useRouter();
  const { showToast } = useToast();
  const [courses, setCourses] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<any>(null);
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [filter, setFilter] = useState("all"); // all, in-progress, completed

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const token = localStorage.getItem("accessToken");

        if (!token) {
          router.push("/login");
          return;
        }

        // Fetch user data to determine role
        const userResponse = await fetch("http://localhost:5000/api/auth/me", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!userResponse.ok) {
          throw new Error("Failed to fetch user data");
        }

        const userData = await userResponse.json();
        setUser(userData.user);

        // Endpoint depends on user role
        const endpoint = 
          userData.user.role === "student"
            ? "http://localhost:5000/api/courses/enrolled"
            : userData.user.role === "instructor"
            ? "http://localhost:5000/api/courses/instructor"
            : "http://localhost:5000/api/courses";

        const coursesResponse = await fetch(endpoint, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!coursesResponse.ok) {
          throw new Error("Failed to fetch courses");
        }

        const coursesData = await coursesResponse.json();
        setCourses(coursesData.data || []);
      } catch (error) {
        console.error("Courses fetch error:", error);
        showToast("Error loading courses", "error");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCourses();
  }, [router, showToast]);

  const filteredCourses = courses.filter((course) => {
    if (filter === "all") return true;
    return course.completion_status === filter;
  });

  // Handler for creating a new course (instructor/admin only)
  const handleCreateCourse = () => {
    router.push("/dashboard/courses/create");
  };

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="flex h-full items-center justify-center">
          <div className="h-8 w-8 animate-spin rounded-full border-2 border-primary-400 border-t-transparent"></div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="p-6">
        <div className="mb-6 flex flex-col justify-between gap-4 sm:flex-row sm:items-center">
          <div>
            <h1 className="text-2xl font-bold">
              {user?.role === "student"
                ? "Kursus Saya"
                : user?.role === "instructor"
                ? "Kursus yang Saya Kelola"
                : "Semua Kursus"}
            </h1>
            <p className="text-neutral-600 dark:text-neutral-400">
              {user?.role === "student"
                ? "Daftar kursus yang Anda ikuti"
                : user?.role === "instructor"
                ? "Kelola kursus yang Anda buat"
                : "Kelola semua kursus pada platform"}
            </p>
          </div>

          {/* Action buttons based on role */}
          {user?.role !== "student" && (
            <Button onClick={handleCreateCourse} className="flex items-center gap-2">
              <FiPlus />
              Buat Kursus Baru
            </Button>
          )}
        </div>

        {/* Filters and search */}
        <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex gap-2">
            <div className="relative rounded-lg border border-neutral-200 dark:border-neutral-700">
              <button
                onClick={() => setFilter("all")}
                className={`px-4 py-2 text-sm ${
                  filter === "all" 
                    ? "bg-primary-50 text-primary-600 dark:bg-primary-900/20 dark:text-primary-400" 
                    : "text-neutral-600 hover:bg-neutral-100 dark:text-neutral-400 dark:hover:bg-neutral-800"
                }`}
              >
                Semua
              </button>
              <button
                onClick={() => setFilter("in_progress")}
                className={`px-4 py-2 text-sm ${
                  filter === "in_progress" 
                    ? "bg-primary-50 text-primary-600 dark:bg-primary-900/20 dark:text-primary-400" 
                    : "text-neutral-600 hover:bg-neutral-100 dark:text-neutral-400 dark:hover:bg-neutral-800"
                }`}
              >
                Sedang Dipelajari
              </button>
              <button
                onClick={() => setFilter("completed")}
                className={`px-4 py-2 text-sm ${
                  filter === "completed" 
                    ? "bg-primary-50 text-primary-600 dark:bg-primary-900/20 dark:text-primary-400" 
                    : "text-neutral-600 hover:bg-neutral-100 dark:text-neutral-400 dark:hover:bg-neutral-800"
                }`}
              >
                Selesai
              </button>
            </div>
            
            <button className="flex items-center gap-2 rounded-lg border border-neutral-200 px-3 py-2 text-neutral-600 hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-400 dark:hover:bg-neutral-800">
              <FiFilter size={16} />
              <span className="text-sm">Filter</span>
            </button>
          </div>

          <div className="flex gap-2">
            <div className="relative">
              <input
                type="text"
                placeholder="Cari kursus..."
                className="pl-9 pr-4 py-2 rounded-lg border border-neutral-200 w-full dark:border-neutral-700 dark:bg-neutral-800"
              />
              <FiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-400" />
            </div>
            
            <div className="flex rounded-lg border border-neutral-200 dark:border-neutral-700">
              <button
                onClick={() => setViewMode("grid")}
                className={`p-2 ${
                  viewMode === "grid" 
                    ? "bg-primary-50 text-primary-600 dark:bg-primary-900/20 dark:text-primary-400" 
                    : "text-neutral-600 hover:bg-neutral-100 dark:text-neutral-400 dark:hover:bg-neutral-800"
                }`}
              >
                <FiGrid size={18} />
              </button>
              <button
                onClick={() => setViewMode("list")}
                className={`p-2 ${
                  viewMode === "list" 
                    ? "bg-primary-50 text-primary-600 dark:bg-primary-900/20 dark:text-primary-400" 
                    : "text-neutral-600 hover:bg-neutral-100 dark:text-neutral-400 dark:hover:bg-neutral-800"
                }`}
              >
                <FiList size={18} />
              </button>
            </div>
          </div>
        </div>

        {/* Course list */}
        {filteredCourses.length > 0 ? (
          <div className={viewMode === "grid" 
            ? "grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4" 
            : "space-y-4"
          }>
            {filteredCourses.map((course) => (
              viewMode === "grid" ? (
                <CourseCard 
                  key={course.id || course.course_id} 
                  course={course} 
                  userRole={user?.role} 
                />
              ) : (
                <CourseListItem 
                  key={course.id || course.course_id} 
                  course={course} 
                  userRole={user?.role} 
                />
              )
            ))}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center rounded-lg border border-dashed border-neutral-300 bg-neutral-50 p-12 text-center dark:border-neutral-700 dark:bg-neutral-800/30">
            <div className="mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-neutral-100 dark:bg-neutral-800">
              <FiBook size={24} className="text-neutral-500" />
            </div>
            <h3 className="mb-2 text-lg font-medium">Tidak ada kursus</h3>
            <p className="mb-6 max-w-md text-neutral-600 dark:text-neutral-400">
              {user?.role === "student"
                ? "Anda belum terdaftar pada kursus apapun. Jelajahi katalog kursus untuk memulai pembelajaran."
                : "Anda belum membuat kursus apapun. Mulai buat kursus pertama Anda sekarang."}
            </p>
            {user?.role === "student" ? (
              <Link href="/courses">
                <Button>Jelajahi Kursus</Button>
              </Link>
            ) : (
              <Button onClick={handleCreateCourse}>Buat Kursus</Button>
            )}
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}

const CourseCard = ({ course, userRole }: { course: any; userRole: string }) => {
  // Handle different course data structure based on role
  const courseData = course.course || course;
  const progressPercentage = userRole === "student" ? (course.progress_percentage || 0) : null;
  
  return (
    <div className="overflow-hidden rounded-lg border border-neutral-200 bg-white shadow-sm transition-all hover:shadow-md dark:border-neutral-700 dark:bg-neutral-800">
      <div className="relative h-40">
        <Image
          src={courseData.thumbnail_url || "/images/course-placeholder.jpg"}
          alt={courseData.title}
          fill
          className="object-cover"
        />
        {userRole === "student" && (
          <div className="absolute top-2 right-2">
            <span className={`rounded-full px-2 py-1 text-xs font-medium ${
              course.completion_status === "completed"
                ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400"
                : course.completion_status === "in_progress"
                ? "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400"
                : "bg-neutral-100 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-300"
            }`}>
              {course.completion_status === "completed"
                ? "Selesai"
                : course.completion_status === "in_progress"
                ? "Sedang Dipelajari"
                : "Belum Dimulai"}
            </span>
          </div>
        )}
      </div>
      
      <div className="p-4">
        <h3 className="mb-2 font-semibold line-clamp-2">{courseData.title}</h3>
        
        <div className="mb-3 flex flex-wrap gap-2 text-xs">
          <span className="flex items-center text-neutral-500 dark:text-neutral-400">
            <FiClock className="mr-1" />
            {courseData.duration_hours || 0} jam
          </span>
          
          <span className="flex items-center text-neutral-500 dark:text-neutral-400">
            <FiUsers className="mr-1" />
            {courseData.enrollmentCount || courseData.enrollment_count || 0} siswa
          </span>
          
          <span className="flex items-center text-neutral-500 dark:text-neutral-400">
            <FiBarChart2 className="mr-1" />
            {courseData.level || "Pemula"}
          </span>
        </div>
        
        {userRole === "student" && typeof progressPercentage === "number" && (
          <>
            <div className="mb-1 flex items-center justify-between text-sm">
              <span className="text-neutral-600 dark:text-neutral-400">Progress</span>
              <span className="font-medium">{progressPercentage}%</span>
            </div>
            <div className="mb-4 h-1.5 w-full overflow-hidden rounded-full bg-neutral-200 dark:bg-neutral-700">
              <div
                className="h-full rounded-full bg-primary-400"
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
          </>
        )}

        <Link href={userRole === "student" 
          ? `/dashboard/courses/${course.course_id || courseData.id}` 
          : `/dashboard/courses/${courseData.id}/manage`
        }>
          <Button 
            variant="primary" 
            fullWidth 
            className="rounded-lg"
          >
            {userRole === "student" 
              ? course.completion_status === "not_started" 
                ? "Mulai Belajar" 
                : "Lanjutkan Belajar"
              : "Kelola Kursus"
            }
          </Button>
        </Link>
      </div>
    </div>
  );
};

const CourseListItem = ({ course, userRole }: { course: any; userRole: string }) => {
  // Handle different course data structure based on role
  const courseData = course.course || course;
  const progressPercentage = userRole === "student" ? (course.progress_percentage || 0) : null;
  
  return (
    <div className="flex flex-col overflow-hidden rounded-lg border border-neutral-200 bg-white shadow-sm hover:shadow-md dark:border-neutral-700 dark:bg-neutral-800 sm:flex-row">
      <div className="relative h-40 w-full sm:h-auto sm:w-48">
        <Image
          src={courseData.thumbnail_url || "/images/course-placeholder.jpg"}
          alt={courseData.title}
          fill
          className="object-cover"
        />
      </div>
      
      <div className="flex flex-1 flex-col justify-between p-4">
        <div>
          <div className="mb-2 flex items-center justify-between">
            <h3 className="font-semibold">{courseData.title}</h3>
            {userRole === "student" && (
              <span className={`rounded-full px-2 py-1 text-xs font-medium ${
                course.completion_status === "completed"
                  ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400"
                  : course.completion_status === "in_progress"
                  ? "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400"
                  : "bg-neutral-100 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-300"
              }`}>
                {course.completion_status === "completed"
                  ? "Selesai"
                  : course.completion_status === "in_progress"
                  ? "Sedang Dipelajari"
                  : "Belum Dimulai"}
              </span>
            )}
          </div>
          
          <p className="mb-3 text-sm text-neutral-600 dark:text-neutral-400 line-clamp-2">
            {courseData.description}
          </p>
          
          <div className="mb-4 flex flex-wrap gap-4 text-xs">
            <span className="flex items-center text-neutral-500 dark:text-neutral-400">
              <FiClock className="mr-1" />
              {courseData.duration_hours || 0} jam
            </span>
            
            <span className="flex items-center text-neutral-500 dark:text-neutral-400">
              <FiUsers className="mr-1" />
              {courseData.enrollmentCount || courseData.enrollment_count || 0} siswa
            </span>
            
            <span className="flex items-center text-neutral-500 dark:text-neutral-400">
              <FiBarChart2 className="mr-1" />
              {courseData.level || "Pemula"}
            </span>
          </div>
          
          {userRole === "student" && typeof progressPercentage === "number" && (
            <>
              <div className="mb-1 flex items-center justify-between text-sm">
                <span className="text-neutral-600 dark:text-neutral-400">Progress</span>
                <span className="font-medium">{progressPercentage}%</span>
              </div>
              <div className="mb-4 h-1.5 w-full overflow-hidden rounded-full bg-neutral-200 dark:bg-neutral-700">
                <div
                  className="h-full rounded-full bg-primary-400"
                  style={{ width: `${progressPercentage}%` }}
                ></div>
              </div>
            </>
          )}
        </div>
        
        <Link href={userRole === "student" 
          ? `/dashboard/courses/${course.course_id || courseData.id}` 
          : `/dashboard/courses/${courseData.id}/manage`
        }>
          <Button 
            variant="primary" 
            className="rounded-lg w-full sm:w-auto"
          >
            {userRole === "student" 
              ? course.completion_status === "not_started" 
                ? "Mulai Belajar" 
                : "Lanjutkan Belajar"
              : "Kelola Kursus"
            }
          </Button>
        </Link>
      </div>
    </div>
  );
};==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\dashboard\courses\[id]\learn\[lessonId]\page.tsx ==== 
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import DashboardLayout from "@/components/layout/DashboardLayout";
import Button from "@/components/ui/Button";
import { useToast } from "@/components/ui/Toaster";
import {
  FiArrowLeft,
  FiArrowRight,
  FiCheckCircle,
  FiClock,
  FiEdit,
  FiList,
  FiVideo,
  FiFileText,
  FiHelpCircle,
} from "react-icons/fi";
// Import interface
import { Course, Lesson, Module } from "@/types/course";

export default function CourseLearningPage({
  params,
}: {
  params: { id: string; lessonId: string };
}) {
  const router = useRouter();
  const { showToast } = useToast();

  // Terapkan tipe ke state
  const [course, setCourse] = useState<Course | null>(null);
  const [currentLesson, setCurrentLesson] = useState<Lesson | null>(null);
  const [modules, setModules] = useState<Module[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isSidebarOpen, setIsSidebarOpen] = useState<boolean>(false);
  const [progress, setProgress] = useState<number>(0);
  const [isCompleting, setIsCompleting] = useState<boolean>(false);

  useEffect(() => {
    const fetchCourseData = async () => {
      try {
        const token = localStorage.getItem("accessToken");

        if (!token) {
          router.push("/login");
          return;
        }

        // Fetch course data
        const courseResponse = await fetch(
          `http://localhost:5000/api/courses/${params.id}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!courseResponse.ok) {
          throw new Error("Failed to fetch course data");
        }

        const courseData = await courseResponse.json();
        setCourse(courseData.data as Course);

        // Fetch modules dan lessons
        const modulesResponse = await fetch(
          `http://localhost:5000/api/courses/${params.id}/modules`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!modulesResponse.ok) {
          throw new Error("Failed to fetch modules data");
        }

        const modulesData = await modulesResponse.json();
        setModules(modulesData.data as Module[]);

        // Fetch current lesson
        const lessonResponse = await fetch(
          `http://localhost:5000/api/lessons/${params.lessonId}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!lessonResponse.ok) {
          throw new Error("Failed to fetch lesson data");
        }

        const lessonData = await lessonResponse.json();
        setCurrentLesson(lessonData.data as Lesson);

        // Calculate progress
        if (
          courseData.data.enrollmentStatus &&
          courseData.data.enrollmentStatus.enrolled
        ) {
          setProgress(33); // Example progress percentage
        }
      } catch (error) {
        console.error("Course data fetch error:", error);
        showToast("Error loading course content", "error");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCourseData();
  }, [params.id, params.lessonId, router, showToast]);

  const handleCompleteLesson = async (): Promise<void> => {
    try {
      setIsCompleting(true);
      const token = localStorage.getItem("accessToken");

      const response = await fetch(
        `http://localhost:5000/api/lessons/${params.lessonId}/complete`,
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            time_spent_minutes: 10,
          }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        showToast("Materi berhasil ditandai selesai!", "success");

        const nextLesson = findNextLesson();
        if (nextLesson) {
          router.push(`/dashboard/courses/${params.id}/learn/${nextLesson.id}`);
        } else {
          router.push(`/dashboard/courses/${params.id}`);
        }
      } else {
        showToast(data.message || "Gagal menyelesaikan materi", "error");
      }
    } catch (error) {
      console.error("Complete lesson error:", error);
      showToast("Terjadi kesalahan saat menyelesaikan materi", "error");
    } finally {
      setIsCompleting(false);
    }
  };

  const findNextLesson = (): Lesson | null => {
    // Flatten all lessons from all modules
    const allLessons: Lesson[] = [];
    modules.forEach((module: Module) => {
      if (module.lessons) {
        module.lessons.forEach((lesson: Lesson) => {
          allLessons.push({
            ...lesson,
            moduleTitle: module.title, // Tambahkan tipe ini ke interface Lesson jika dibutuhkan
          } as Lesson);
        });
      }
    });

    // Find the index of the current lesson
    const currentIndex = allLessons.findIndex(
      (lesson: Lesson) => lesson.id === parseInt(params.lessonId)
    );

    // Return the next lesson if exists
    if (currentIndex >= 0 && currentIndex < allLessons.length - 1) {
      return allLessons[currentIndex + 1];
    }

    return null;
  };

  const findPreviousLesson = () => {
    // Similar to findNextLesson
    const allLessons: any[] = [];
    modules.forEach((module: any) => {
      if (module.lessons) {
        module.lessons.forEach((lesson: any) => {
          allLessons.push({
            ...lesson,
            moduleTitle: module.title,
          });
        });
      }
    });

    const currentIndex = allLessons.findIndex(
      (lesson: any) => lesson.id === parseInt(params.lessonId)
    );

    if (currentIndex > 0) {
      return allLessons[currentIndex - 1];
    }

    return null;
  };

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="flex min-h-screen items-center justify-center">
          <div className="h-10 w-10 animate-spin rounded-full border-2 border-primary-400 border-t-transparent"></div>
        </div>
      </DashboardLayout>
    );
  }

  if (!course || !currentLesson) {
    return (
      <DashboardLayout>
        <div className="container mx-auto px-4 py-16 text-center md:px-8">
          <h1 className="mb-4 text-2xl font-bold">Materi tidak ditemukan</h1>
          <p className="mb-8">
            Materi yang Anda cari tidak tersedia atau telah dihapus.
          </p>
          <Link href="/dashboard/courses">
            <Button>Kembali ke Kursus</Button>
          </Link>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="flex flex-col h-full">
        {/* Course Header */}
        <header className="border-b border-neutral-200 bg-white dark:border-neutral-700 dark:bg-neutral-800">
          <div className="container mx-auto px-4 py-4 flex items-center justify-between">
            <div className="flex items-center">
              <Link
                href={`/dashboard/courses/${params.id}`}
                className="mr-4 text-neutral-500 hover:text-primary-500 dark:text-neutral-400"
              >
                <FiArrowLeft size={20} />
              </Link>
              <div>
                <h1 className="text-lg font-bold truncate">{course.title}</h1>
                <div className="flex items-center text-sm text-neutral-500 dark:text-neutral-400">
                  <span className="mr-2">Progress:</span>
                  <div className="w-32 h-2 bg-neutral-200 rounded-full dark:bg-neutral-700">
                    <div
                      className="h-full bg-primary-400 rounded-full"
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                  <span className="ml-2">{progress}%</span>
                </div>
              </div>
            </div>
            <button
              onClick={() => setIsSidebarOpen(!isSidebarOpen)}
              className="flex items-center px-3 py-1 bg-neutral-100 hover:bg-neutral-200 rounded-lg text-sm font-medium dark:bg-neutral-700 dark:hover:bg-neutral-600"
            >
              <FiList className="mr-2" /> Materi
            </button>
          </div>
        </header>

        <div className="flex flex-1 overflow-hidden">
          {/* Content Area */}
          <main className="flex-1 overflow-auto">
            <div className="container mx-auto px-4 py-8">
              <div className="max-w-4xl mx-auto">
                <h2 className="text-2xl font-bold mb-6">
                  {currentLesson.title}
                </h2>

                {/* Content based on type */}
                <div className="mb-8">
                  {currentLesson.content_type === "video" && (
                    <div className="relative pb-[56.25%] h-0 rounded-lg overflow-hidden mb-4 bg-neutral-200 dark:bg-neutral-700">
                      {currentLesson.content_url ? (
                        <iframe
                          src={currentLesson.content_url}
                          className="absolute top-0 left-0 w-full h-full"
                          allowFullScreen
                          title={currentLesson.title}
                        ></iframe>
                      ) : (
                        <div className="absolute top-0 left-0 w-full h-full flex items-center justify-center text-neutral-500">
                          <FiVideo size={40} />
                          <span className="ml-2">Video tidak tersedia</span>
                        </div>
                      )}
                    </div>
                  )}

                  {currentLesson.content_type === "article" && (
                    <div className="prose max-w-none dark:prose-invert">
                      {currentLesson.content_text ? (
                        <div
                          dangerouslySetInnerHTML={{
                            __html: currentLesson.content_text,
                          }}
                        ></div>
                      ) : (
                        <div className="flex items-center justify-center p-8 text-neutral-500 border border-dashed border-neutral-300 rounded-lg dark:border-neutral-700">
                          <FiFileText size={24} />
                          <span className="ml-2">
                            Konten artikel tidak tersedia
                          </span>
                        </div>
                      )}
                    </div>
                  )}

                  {currentLesson.content_type === "quiz" && (
                    <div className="bg-white p-6 rounded-lg shadow-sm dark:bg-neutral-800">
                      <div className="flex items-center mb-4">
                        <div className="h-10 w-10 rounded-full bg-primary-100 flex items-center justify-center text-primary-500 dark:bg-primary-900/30">
                          <FiHelpCircle size={24} />
                        </div>
                        <div className="ml-4">
                          <h3 className="font-semibold">
                            Quiz: {currentLesson.title}
                          </h3>
                          <p className="text-sm text-neutral-500 dark:text-neutral-400">
                            <FiClock className="inline mr-1" />
                            {currentLesson.quiz?.time_limit_minutes || 30} menit
                          </p>
                        </div>
                      </div>
                      <p className="mb-4">
                        Tes pemahaman Anda tentang materi yang telah dipelajari
                        dalam bagian ini.
                      </p>
                      <Link
                        href={`/dashboard/courses/${params.id}/quiz/${currentLesson.quiz?.id || 0}`}
                      >
                        <Button>Mulai Quiz</Button>
                      </Link>
                    </div>
                  )}

                  {/* Other content types can be handled here */}
                </div>

                {/* Navigation buttons */}
                <div className="flex items-center justify-between mt-8 pt-4 border-t border-neutral-200 dark:border-neutral-700">
                  {findPreviousLesson() ? (
                    <Link
                      href={`/dashboard/courses/${params.id}/learn/${findPreviousLesson()?.id}`}
                    >
                      <Button variant="outline" className="flex items-center">
                        <FiArrowLeft className="mr-2" /> Sebelumnya
                      </Button>
                    </Link>
                  ) : (
                    <div></div>
                  )}

                  <Button
                    onClick={handleCompleteLesson}
                    disabled={isCompleting}
                    className="flex items-center"
                  >
                    {isCompleting ? "Memproses..." : "Tandai Selesai"}
                    {!isCompleting && <FiCheckCircle className="ml-2" />}
                  </Button>

                  {findNextLesson() ? (
                    <Link
                      href={`/dashboard/courses/${params.id}/learn/${findNextLesson()?.id}`}
                    >
                      <Button variant="primary" className="flex items-center">
                        Selanjutnya <FiArrowRight className="ml-2" />
                      </Button>
                    </Link>
                  ) : (
                    <div></div>
                  )}
                </div>
              </div>
            </div>
          </main>

          {/* Course Content Sidebar */}
          <aside
            className={`fixed inset-y-0 right-0 w-80 bg-white shadow-lg transform transition-transform z-30 overflow-y-auto dark:bg-neutral-800 ${
              isSidebarOpen ? "translate-x-0" : "translate-x-full"
            } lg:relative lg:transform-none lg:shadow-none lg:w-72 lg:border-l lg:border-neutral-200 lg:dark:border-neutral-700`}
          >
            <div className="p-4 border-b border-neutral-200 dark:border-neutral-700 flex justify-between items-center">
              <h3 className="font-semibold">Materi Kursus</h3>
              <button
                onClick={() => setIsSidebarOpen(false)}
                className="p-1 hover:bg-neutral-100 rounded dark:hover:bg-neutral-700 lg:hidden"
              >
                <FiArrowRight />
              </button>
            </div>

            <div className="p-4">
              {modules.map((module: any, moduleIndex: number) => (
                <div key={module.id} className="mb-4">
                  <h4 className="font-medium mb-2 text-sm uppercase text-neutral-500 dark:text-neutral-400">
                    Module {moduleIndex + 1}: {module.title}
                  </h4>
                  <ul className="space-y-1">
                    {module.lessons &&
                      module.lessons.map((lesson: any) => (
                        <li key={lesson.id}>
                          <Link
                            href={`/dashboard/courses/${params.id}/learn/${lesson.id}`}
                            className={`block px-3 py-2 rounded-lg text-sm ${
                              parseInt(params.lessonId) === lesson.id
                                ? "bg-primary-50 text-primary-600 dark:bg-primary-900/20 dark:text-primary-400"
                                : "hover:bg-neutral-100 dark:hover:bg-neutral-700"
                            }`}
                          >
                            <div className="flex items-center">
                              {/* Ikon tipe konten */}
                              {lesson.content_type === "video" && (
                                <FiVideo className="mr-2 flex-shrink-0" />
                              )}
                              {lesson.content_type === "article" && (
                                <FiFileText className="mr-2 flex-shrink-0" />
                              )}
                              {lesson.content_type === "quiz" && (
                                <FiEdit className="mr-2 flex-shrink-0" />
                              )}
                              <span className="truncate">{lesson.title}</span>
                              {/* Indikator status */}
                              {lesson.progress &&
                                lesson.progress.status === "completed" && (
                                  <FiCheckCircle className="ml-auto text-green-500 flex-shrink-0" />
                                )}
                            </div>
                          </Link>
                        </li>
                      ))}
                  </ul>
                </div>
              ))}
            </div>
          </aside>
        </div>
      </div>
    </DashboardLayout>
  );
}
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\dashboard\profile\page.tsx ==== 
// src/app/dashboard/profile/page.tsx
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import DashboardLayout from "@/components/layout/DashboardLayout";
import Button from "@/components/ui/Button";
import { useToast } from "@/components/ui/Toaster";
import {
  FiUser,
  FiMail,
  FiBookmark,
  FiEdit,
  FiLock,
  FiSave,
  FiCamera,
  FiCheckCircle,
  FiLoader,
  FiArrowLeft,
  FiAlertCircle,
} from "react-icons/fi";
import { User, UserFormData, PasswordData } from "@/types/user";
import { useAuth } from "@/contexts/AuthContext";

type FormErrors = {
  full_name?: string;
  username?: string;
  email?: string;
  department?: string;
  currentPassword?: string;
  newPassword?: string;
  confirmPassword?: string;
};

export default function ProfilePage() {
  const router = useRouter();
  const { showToast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { user: authUser, refreshUserData } = useAuth();

  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [isSaving, setIsSaving] = useState<boolean>(false);
  const [isUploading, setIsUploading] = useState<boolean>(false);
  const [formErrors, setFormErrors] = useState<FormErrors>({});

  const [formData, setFormData] = useState<UserFormData>({
    full_name: "",
    username: "",
    email: "",
    department: "",
  });

  const [passwordData, setPasswordData] = useState<PasswordData>({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [showPasswordForm, setShowPasswordForm] = useState<boolean>(false);
  const [passwordError, setPasswordError] = useState<string>("");

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const token = localStorage.getItem("accessToken");

        if (!token) {
          router.push("/login");
          return;
        }

        const response = await fetch("http://localhost:5000/api/auth/me", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          if (response.status === 401) {
            localStorage.removeItem("accessToken");
            router.push("/login");
            return;
          }
          throw new Error("Failed to fetch user data");
        }

        const data = await response.json();
        // Type assertion for proper typing
        setUser(data.user as User);

        // Initialize form data with user data
        setFormData({
          full_name: data.user.full_name || "",
          username: data.user.username || "",
          email: data.user.email || "",
          department: data.user.department || "",
        });
      } catch (error) {
        console.error("User data fetch error:", error);
        showToast("Error loading user data", "error");
      } finally {
        setIsLoading(false);
      }
    };

    // If auth user is available, use it, otherwise fetch from API
    if (authUser) {
      setUser(authUser);

      setFormData({
        full_name: authUser.full_name || "",
        username: authUser.username || "",
        email: authUser.email || "",
        department: authUser.department || "",
      });

      setIsLoading(false);
    } else {
      fetchUserData();
    }
  }, [router, showToast, authUser]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev: UserFormData) => ({
      ...prev,
      [name]: value,
    }));

    // Clear error when user types
    if (formErrors[name as keyof FormErrors]) {
      setFormErrors((prev) => ({
        ...prev,
        [name]: undefined,
      }));
    }
  };

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setPasswordData((prev: PasswordData) => ({
      ...prev,
      [name]: value,
    }));

    // Clear error when user types
    if (formErrors[name as keyof FormErrors]) {
      setFormErrors((prev) => ({
        ...prev,
        [name]: undefined,
      }));
    }

    // Clear general password error
    if (passwordError) {
      setPasswordError("");
    }
  };

  const handleEditToggle = (): void => {
    setIsEditing(!isEditing);
    setFormErrors({});
  };

  const validateProfileForm = (): FormErrors => {
    const errors: FormErrors = {};

    // Validate full name
    if (!formData.full_name.trim()) {
      errors.full_name = "Nama lengkap wajib diisi";
    } else if (formData.full_name.length < 3) {
      errors.full_name = "Nama lengkap minimal 3 karakter";
    }

    // Validate username
    if (!formData.username.trim()) {
      errors.username = "Username wajib diisi";
    } else if (formData.username.length < 3) {
      errors.username = "Username minimal 3 karakter";
    } else if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {
      errors.username =
        "Username hanya boleh berisi huruf, angka, dan underscore";
    }

    // Validate email
    if (!formData.email.trim()) {
      errors.email = "Email wajib diisi";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = "Format email tidak valid";
    }

    // Validate department
    if (!formData.department) {
      errors.department = "Departemen wajib dipilih";
    }

    return errors;
  };

  const validatePasswordForm = (): FormErrors => {
    const errors: FormErrors = {};

    // Validate current password
    if (!passwordData.currentPassword) {
      errors.currentPassword = "Password saat ini wajib diisi";
    }

    // Validate new password
    if (!passwordData.newPassword) {
      errors.newPassword = "Password baru wajib diisi";
    } else if (passwordData.newPassword.length < 6) {
      errors.newPassword = "Password baru minimal 6 karakter";
    } else if (!/(?=.*[a-zA-Z])(?=.*[0-9])/.test(passwordData.newPassword)) {
      errors.newPassword = "Password harus mengandung huruf dan angka";
    }

    // Validate confirm password
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      errors.confirmPassword = "Konfirmasi password tidak cocok";
    }

    return errors;
  };

  const handleProfileUpdate = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();

    // Validate form
    const errors = validateProfileForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    setIsSaving(true);

    try {
      const token = localStorage.getItem("accessToken");

      const response = await fetch(`http://localhost:5000/api/users/profile`, {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (response.ok) {
        showToast("Profil berhasil diperbarui", "success");

        // Update user state
        setUser((prev: User | null) => {
          if (!prev) return null;
          return { ...prev, ...formData };
        });

        // Also update auth context
        refreshUserData();

        setIsEditing(false);
      } else {
        if (data.field) {
          // Handle field-specific errors
          setFormErrors({
            ...formErrors,
            [data.field]: data.message,
          });
        } else {
          // Handle general error
          showToast(data.message || "Gagal memperbarui profil", "error");
        }
      }
    } catch (error) {
      console.error("Profile update error:", error);
      showToast("Terjadi kesalahan saat memperbarui profil", "error");
    } finally {
      setIsSaving(false);
    }
  };

  const handlePasswordUpdate = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validate form
    const errors = validatePasswordForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    setPasswordError("");
    setIsSaving(true);

    try {
      const token = localStorage.getItem("accessToken");

      const response = await fetch(
        `http://localhost:5000/api/auth/change-password`,
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            currentPassword: passwordData.currentPassword,
            newPassword: passwordData.newPassword,
          }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        showToast("Password berhasil diperbarui", "success");
        setPasswordData({
          currentPassword: "",
          newPassword: "",
          confirmPassword: "",
        });
        setShowPasswordForm(false);

        // If the API requires re-login after password change
        if (data.message && data.message.includes("login kembali")) {
          showToast("Silakan login kembali dengan password baru Anda", "info");

          setTimeout(() => {
            localStorage.removeItem("accessToken");
            localStorage.removeItem("refreshToken");
            router.push("/login");
          }, 2000);
        }
      } else {
        if (data.field) {
          // Field-specific error
          setFormErrors({
            ...formErrors,
            [data.field]: data.message,
          });
        } else {
          // General error
          setPasswordError(data.message || "Gagal memperbarui password");
        }
      }
    } catch (error) {
      console.error("Password update error:", error);
      setPasswordError("Terjadi kesalahan saat memperbarui password");
    } finally {
      setIsSaving(false);
    }
  };

  const handleAvatarClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleAvatarUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file type and size
    const validTypes = ["image/jpeg", "image/png", "image/webp"];
    if (!validTypes.includes(file.type)) {
      showToast(
        "Format file tidak didukung. Gunakan JPG, PNG, atau WEBP",
        "error"
      );
      return;
    }

    if (file.size > 2 * 1024 * 1024) {
      // 2MB
      showToast("Ukuran file terlalu besar. Maksimal 2MB", "error");
      return;
    }

    setIsUploading(true);

    try {
      const token = localStorage.getItem("accessToken");

      const formData = new FormData();
      formData.append("avatar", file);

      const response = await fetch(
        `http://localhost:5000/api/users/profile/avatar`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formData,
        }
      );

      const data = await response.json();

      if (response.ok) {
        showToast("Avatar berhasil diperbarui", "success");

        // Update user state
        setUser((prev) => {
          if (!prev) return null;

          return {
            ...prev,
            avatar_url: data.data.avatar_url,
          } as User;
        });

        // Also update auth context
        refreshUserData();
      } else {
        showToast(data.message || "Gagal memperbarui avatar", "error");
      }
    } catch (error) {
      console.error("Avatar upload error:", error);
      showToast("Terjadi kesalahan saat mengupload avatar", "error");
    } finally {
      setIsUploading(false);

      // Reset the file input
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };

  const departments = [
    "Pilih Departemen",
    "IT & Pengembangan",
    "Pemasaran & Penjualan",
    "Keuangan & Akuntansi",
    "Operasional",
    "Sumber Daya Manusia",
    "Penelitian & Pengembangan",
    "Layanan Pelanggan",
    "Desain & Kreatif",
    "Pendidikan",
    "Lainnya",
  ];

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="flex h-full items-center justify-center">
          <div className="h-8 w-8 animate-spin rounded-full border-2 border-primary-400 border-t-transparent"></div>
        </div>
      </DashboardLayout>
    );
  }

  if (!user) return null;

  return (
    <DashboardLayout>
      <div className="container mx-auto p-6">
        <div className="mb-6 flex items-center">
          <Link
            href="/dashboard"
            className="flex items-center text-neutral-600 hover:text-primary-500 dark:text-neutral-400"
          >
            <FiArrowLeft className="mr-2" />
            <span>Kembali ke Dashboard</span>
          </Link>
        </div>
        <div className="grid gap-8 lg:grid-cols-3">
          {/* Left Column - Profile Card */}
          <div className="lg:col-span-1">
            <div className="rounded-xl bg-white p-6 shadow-sm dark:bg-neutral-800">
              <div className="flex flex-col items-center text-center">
                <div className="relative mb-4">
                  <div className="relative h-32 w-32">
                    <div className="h-full w-full overflow-hidden rounded-full border-4 border-neutral-100 dark:border-neutral-700">
                      {isUploading ? (
                        <div className="flex h-full w-full items-center justify-center bg-neutral-200 dark:bg-neutral-700">
                          <FiLoader
                            className="animate-spin text-primary-400"
                            size={24}
                          />
                        </div>
                      ) : (
                        <Image
                          src={
                            user.avatar_url || "/images/avatar-placeholder.jpg"
                          }
                          alt={user.full_name}
                          fill
                          className="object-cover"
                        />
                      )}
                    </div>
                    <button
                      onClick={handleAvatarClick}
                      className="absolute bottom-0 right-0 flex h-8 w-8 items-center justify-center rounded-full bg-primary-400 text-white shadow-md hover:bg-primary-500"
                      title="Upload foto profil"
                    >
                      <FiCamera size={16} />
                    </button>
                    <input
                      type="file"
                      ref={fileInputRef}
                      onChange={handleAvatarUpload}
                      className="hidden"
                      accept="image/jpeg,image/png,image/webp"
                    />
                  </div>
                </div>
                <h2 className="mb-1 text-xl font-bold">{user.full_name}</h2>
                <p className="mb-2 text-neutral-500 dark:text-neutral-400">
                  @{user.username}
                </p>

                <div className="inline-block rounded-full bg-primary-100 px-3 py-1 text-sm font-medium text-primary-600 dark:bg-primary-900/30 dark:text-primary-400">
                  {user.role === "student"
                    ? "Siswa"
                    : user.role === "instructor"
                      ? "Instruktur"
                      : "Admin"}
                </div>

                <div className="mt-4 w-full text-left">
                  <div className="mb-3">
                    <div className="mb-1 text-sm text-neutral-500 dark:text-neutral-400">
                      Email
                    </div>
                    <div className="flex items-center">
                      <FiMail className="mr-2 text-neutral-400" />
                      <span>{user.email}</span>
                    </div>
                  </div>
                  <div className="mb-3">
                    <div className="mb-1 text-sm text-neutral-500 dark:text-neutral-400">
                      Departemen
                    </div>
                    <div className="flex items-center">
                      <FiBookmark className="mr-2 text-neutral-400" />
                      <span>{user.department || "Belum diatur"}</span>
                    </div>
                  </div>
                  <div>
                    <div className="mb-1 text-sm text-neutral-500 dark:text-neutral-400">
                      Tanggal Bergabung
                    </div>
                    <div className="flex items-center">
                      <FiUser className="mr-2 text-neutral-400" />
                      <span>
                        {new Date(user.created_at).toLocaleDateString("id-ID", {
                          day: "numeric",
                          month: "long",
                          year: "numeric",
                        })}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Edit Profile Form */}
          <div className="lg:col-span-2">
            <div className="rounded-xl bg-white p-6 shadow-sm dark:bg-neutral-800">
              <div className="mb-6 flex items-center justify-between">
                <h2 className="text-xl font-bold">
                  {isEditing ? "Edit Profil" : "Informasi Profil"}
                </h2>
                {!isEditing && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleEditToggle}
                    className="flex items-center gap-2"
                  >
                    <FiEdit size={16} />
                    Edit Profil
                  </Button>
                )}
              </div>

              {isEditing ? (
                <form onSubmit={handleProfileUpdate}>
                  <div className="mb-4">
                    <label
                      htmlFor="full_name"
                      className="mb-1 block text-sm font-medium"
                    >
                      Nama Lengkap <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="full_name"
                      name="full_name"
                      value={formData.full_name}
                      onChange={handleInputChange}
                      required
                      className={`w-full rounded-lg border ${
                        formErrors.full_name
                          ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10"
                          : "border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800"
                      } p-2.5 dark:text-white`}
                    />
                    {formErrors.full_name && (
                      <p className="mt-1 text-sm text-red-500">
                        {formErrors.full_name}
                      </p>
                    )}
                  </div>
                  <div className="mb-4">
                    <label
                      htmlFor="username"
                      className="mb-1 block text-sm font-medium"
                    >
                      Username <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="username"
                      name="username"
                      value={formData.username}
                      onChange={handleInputChange}
                      required
                      className={`w-full rounded-lg border ${
                        formErrors.username
                          ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10"
                          : "border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800"
                      } p-2.5 dark:text-white`}
                    />
                    {formErrors.username && (
                      <p className="mt-1 text-sm text-red-500">
                        {formErrors.username}
                      </p>
                    )}
                  </div>
                  <div className="mb-4">
                    <label
                      htmlFor="email"
                      className="mb-1 block text-sm font-medium"
                    >
                      Email <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      required
                      className={`w-full rounded-lg border ${
                        formErrors.email
                          ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10"
                          : "border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800"
                      } p-2.5 dark:text-white`}
                    />
                    {formErrors.email && (
                      <p className="mt-1 text-sm text-red-500">
                        {formErrors.email}
                      </p>
                    )}
                  </div>
                  <div className="mb-6">
                    <label
                      htmlFor="department"
                      className="mb-1 block text-sm font-medium"
                    >
                      Departemen <span className="text-red-500">*</span>
                    </label>
                    <select
                      id="department"
                      name="department"
                      value={formData.department}
                      onChange={handleInputChange}
                      required
                      className={`w-full rounded-lg border ${
                        formErrors.department
                          ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10"
                          : "border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800"
                      } p-2.5 dark:text-white`}
                    >
                      {departments.map((dept, index) => (
                        <option
                          key={index}
                          value={index === 0 ? "" : dept}
                          disabled={index === 0}
                        >
                          {dept}
                        </option>
                      ))}
                    </select>
                    {formErrors.department && (
                      <p className="mt-1 text-sm text-red-500">
                        {formErrors.department}
                      </p>
                    )}
                  </div>
                  <div className="flex items-center justify-end space-x-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleEditToggle}
                    >
                      Batal
                    </Button>
                    <Button
                      type="submit"
                      className="flex items-center gap-2"
                      disabled={isSaving}
                    >
                      {isSaving ? (
                        <div className="flex items-center">
                          <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent"></span>
                          Menyimpan...
                        </div>
                      ) : (
                        <>
                          <FiSave size={16} />
                          Simpan Perubahan
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              ) : (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                    <div>
                      <h3 className="text-sm font-semibold uppercase text-neutral-500 dark:text-neutral-400">
                        Nama Lengkap
                      </h3>
                      <p className="mt-2">{user.full_name}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-semibold uppercase text-neutral-500 dark:text-neutral-400">
                        Username
                      </h3>
                      <p className="mt-2">{user.username}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-semibold uppercase text-neutral-500 dark:text-neutral-400">
                        Email
                      </h3>
                      <p className="mt-2">{user.email}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-semibold uppercase text-neutral-500 dark:text-neutral-400">
                        Departemen
                      </h3>
                      <p className="mt-2">
                        {user.department || "Belum diatur"}
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Password Change Form */}
            <div className="mt-6 rounded-xl bg-white p-6 shadow-sm dark:bg-neutral-800">
              <div className="mb-6 flex items-center justify-between">
                <h2 className="text-xl font-bold">Keamanan Akun</h2>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowPasswordForm(!showPasswordForm)}
                  className="flex items-center gap-2"
                >
                  <FiLock size={16} />
                  {showPasswordForm ? "Batal" : "Ubah Password"}
                </Button>
              </div>

              {showPasswordForm ? (
                <form onSubmit={handlePasswordUpdate}>
                  {passwordError && (
                    <div className="mb-4 flex items-center rounded-lg bg-red-50 p-4 text-sm text-red-600 dark:bg-red-900/20 dark:text-red-400">
                      <FiAlertCircle className="mr-2 flex-shrink-0" />
                      <span>{passwordError}</span>
                    </div>
                  )}
                  <div className="mb-4">
                    <label
                      htmlFor="currentPassword"
                      className="mb-1 block text-sm font-medium"
                    >
                      Password Saat Ini <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="password"
                      id="currentPassword"
                      name="currentPassword"
                      value={passwordData.currentPassword}
                      onChange={handlePasswordChange}
                      required
                      className={`w-full rounded-lg border ${
                        formErrors.currentPassword
                          ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10"
                          : "border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800"
                      } p-2.5 dark:text-white`}
                    />
                    {formErrors.currentPassword && (
                      <p className="mt-1 text-sm text-red-500">
                        {formErrors.currentPassword}
                      </p>
                    )}
                  </div>
                  <div className="mb-4">
                    <label
                      htmlFor="newPassword"
                      className="mb-1 block text-sm font-medium"
                    >
                      Password Baru <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="password"
                      id="newPassword"
                      name="newPassword"
                      value={passwordData.newPassword}
                      onChange={handlePasswordChange}
                      required
                      minLength={6}
                      className={`w-full rounded-lg border ${
                        formErrors.newPassword
                          ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10"
                          : "border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800"
                      } p-2.5 dark:text-white`}
                    />
                    {formErrors.newPassword ? (
                      <p className="mt-1 text-sm text-red-500">
                        {formErrors.newPassword}
                      </p>
                    ) : (
                      <p className="mt-1 text-xs text-neutral-500">
                        Minimal 6 karakter, kombinasi huruf dan angka
                      </p>
                    )}
                  </div>
                  <div className="mb-6">
                    <label
                      htmlFor="confirmPassword"
                      className="mb-1 block text-sm font-medium"
                    >
                      Konfirmasi Password Baru{" "}
                      <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="password"
                      id="confirmPassword"
                      name="confirmPassword"
                      value={passwordData.confirmPassword}
                      onChange={handlePasswordChange}
                      required
                      className={`w-full rounded-lg border ${
                        formErrors.confirmPassword
                          ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10"
                          : "border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800"
                      } p-2.5 dark:text-white`}
                    />
                    {formErrors.confirmPassword && (
                      <p className="mt-1 text-sm text-red-500">
                        {formErrors.confirmPassword}
                      </p>
                    )}
                  </div>
                  <div className="flex justify-end">
                    <Button
                      type="submit"
                      variant="primary"
                      className="flex items-center gap-2"
                      disabled={isSaving}
                    >
                      {isSaving ? (
                        <div className="flex items-center">
                          <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent"></span>
                          Menyimpan...
                        </div>
                      ) : (
                        <>
                          <FiCheckCircle size={16} />
                          Update Password
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              ) : (
                <p className="text-neutral-600 dark:text-neutral-300">
                  Password Anda adalah informasi pribadi yang penting. Jaga
                  kerahasiaan password Anda dan ubah secara berkala untuk
                  keamanan akun Anda.
                </p>
              )}
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\login\page.tsx ==== 
// src/app/login/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useDispatch, useSelector } from "react-redux";
import { setCookie } from "cookies-next";
import {
  FiEye,
  FiEyeOff,
  FiArrowLeft,
  FiMoon,
  FiSun,
  FiLock,
  FiMail,
  FiAlertCircle,
} from "react-icons/fi";
import { toggleTheme } from "@/redux/features/themeSlice";
import { RootState } from "@/redux/store";
import { useToast } from "@/components/ui/Toaster";
import Logo from "@/components/ui/Logo";
import Button from "@/components/ui/Button";
import { useAuth } from "@/contexts/AuthContext";

// Apply dark mode manually on client-side
const applyTheme = (isDark: boolean) => {
  if (isDark) {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
};

type FormErrors = {
  email?: string;
  password?: string;
};

const LoginPage = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [generalError, setGeneralError] = useState("");
  const [formErrors, setFormErrors] = useState<FormErrors>({});

  const router = useRouter();
  const dispatch = useDispatch();
  const darkMode = useSelector((state: RootState) => state.theme.darkMode);
  const { showToast } = useToast();
  const { login } = useAuth();

  useEffect(() => {
    // Check for remembered email
    const rememberedEmail = localStorage.getItem("rememberedEmail");
    if (rememberedEmail) {
      setEmail(rememberedEmail);
      setRememberMe(true);
    }
  }, []);

  const handleThemeToggle = () => {
    dispatch(toggleTheme());
    // Also update the document class for immediate visual change
    applyTheme(!darkMode);
  };

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
    // Clear error when user starts typing
    if (formErrors.email) {
      setFormErrors(prev => ({ ...prev, email: undefined }));
    }
  };

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
    // Clear error when user starts typing
    if (formErrors.password) {
      setFormErrors(prev => ({ ...prev, password: undefined }));
    }
  };

  const validateForm = () => {
    const errors: FormErrors = {};
    
    // Validate email
    if (!email.trim()) {
      errors.email = "Email wajib diisi";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      errors.email = "Format email tidak valid";
    }
    
    // Validate password
    if (!password) {
      errors.password = "Password wajib diisi";
    }
    
    return errors;
  };

  const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  
  // Validate form
  const errors = validateForm();
  if (Object.keys(errors).length > 0) {
    setFormErrors(errors);
    return;
  }
  
  setGeneralError("");
  setIsLoading(true);

  try {
    // Attempt login using Auth context
    const result = await login(email, password, rememberMe);

    if (result.success) {
      showToast("Login berhasil! Anda akan dialihkan ke dashboard", "success");
      router.push("/dashboard");
    } else {
      setGeneralError(result.message || "Email atau password tidak valid");
    }
  } catch (err) {
    console.error("Login error:", err);
    setGeneralError("Terjadi kesalahan koneksi ke server");
  } finally {
    setIsLoading(false);
  }
};

  return (
    <div className="flex min-h-screen bg-gradient-to-br from-white to-primary-50 dark:from-neutral-900 dark:to-primary-900/20">
      {/* Left side - Back button and theme toggle */}
      <div className="fixed left-4 top-4 z-10 flex items-center justify-between gap-4">
        <Link
          href="/"
          className="flex items-center text-neutral-600 transition-colors hover:text-primary-400 dark:text-neutral-300"
        >
          <FiArrowLeft className="mr-2" />
          <span className="hidden sm:inline">Kembali</span>
        </Link>
        <button
          onClick={handleThemeToggle}
          className="rounded-full p-2 text-neutral-700 transition-colors hover:bg-neutral-200/60 dark:text-neutral-200 dark:hover:bg-neutral-800/60"
          aria-label="Toggle theme"
        >
          {darkMode ? <FiSun size={20} /> : <FiMoon size={20} />}
        </button>
      </div>

      <div className="flex w-full flex-col items-center justify-center p-4 sm:p-8 md:p-12">
        <div className="w-full max-w-md rounded-2xl bg-white/80 p-8 shadow-xl backdrop-blur-sm dark:bg-neutral-800/80 sm:p-10">
          <div className="mb-8 flex flex-col items-center">
            <Logo className="mb-6" />
            <h1 className="mb-2 text-center font-poppins text-3xl font-bold tracking-tight text-neutral-900 dark:text-white">
              Selamat Datang Kembali!
            </h1>
            <p className="text-center text-neutral-600 dark:text-neutral-400">
              Masuk untuk melanjutkan pembelajaran Anda
            </p>
          </div>

          {generalError && (
            <div className="mb-6 flex items-center rounded-lg bg-red-50 p-4 text-sm text-red-500 dark:bg-red-900/20">
              <FiAlertCircle className="mr-2 flex-shrink-0" />
              <span>{generalError}</span>
            </div>
          )}

          <form className="space-y-5" onSubmit={handleSubmit}>
            <div className="space-y-1">
              <label
                htmlFor="email"
                className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
              >
                Email <span className="text-red-500">*</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                  <FiMail size={18} />
                </div>
                <input
                  id="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={handleEmailChange}
                  className={`block w-full rounded-xl border ${
                    formErrors.email 
                      ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                      : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                  } px-3 py-3 pl-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                  placeholder="nama@email.com"
                />
              </div>
              {formErrors.email && (
                <p className="mt-1 text-sm text-red-500">{formErrors.email}</p>
              )}
            </div>

            <div className="space-y-1">
              <div className="flex items-center justify-between">
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
                >
                  Password <span className="text-red-500">*</span>
                </label>
                <Link
                  href="/forgot-password"
                  className="text-sm font-medium text-primary-400 transition-colors hover:text-primary-500"
                >
                  Lupa password?
                </Link>
              </div>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                  <FiLock size={18} />
                </div>
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  autoComplete="current-password"
                  required
                  value={password}
                  onChange={handlePasswordChange}
                  className={`block w-full rounded-xl border ${
                    formErrors.password 
                      ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                      : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                  } px-3 py-3 pl-10 pr-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                  placeholder="••••••••"
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 flex items-center px-3 text-neutral-500 transition-colors hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? <FiEyeOff size={18} /> : <FiEye size={18} />}
                </button>
              </div>
              {formErrors.password && (
                <p className="mt-1 text-sm text-red-500">{formErrors.password}</p>
              )}
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  checked={rememberMe}
                  onChange={(e) => setRememberMe(e.target.checked)}
                  className="h-4 w-4 rounded border-neutral-300 text-primary-400 transition-colors focus:ring-primary-400 dark:border-neutral-700"
                />
                <label
                  htmlFor="remember-me"
                  className="ml-2 block text-sm text-neutral-700 dark:text-neutral-300"
                >
                  Ingat saya
                </label>
              </div>
            </div>

            <div className="pt-2">
              <Button
                type="submit"
                variant="primary"
                fullWidth
                className="rounded-xl py-3 transition-all hover:shadow-lg"
                disabled={isLoading}
              >
                {isLoading ? (
                  <div className="flex items-center justify-center">
                    <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent"></span>
                    Memproses...
                  </div>
                ) : (
                  "Masuk Sekarang"
                )}
              </Button>
            </div>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-neutral-300 dark:border-neutral-700"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="bg-white px-2 text-neutral-500 dark:bg-neutral-800/90 dark:text-neutral-400">
                  Atau masuk dengan
                </span>
              </div>
            </div>

            <div className="mt-6 grid grid-cols-2 gap-3">
              <button
                type="button"
                className="inline-flex items-center justify-center rounded-xl border border-neutral-300 bg-white px-4 py-2.5 text-neutral-700 shadow-sm transition-colors hover:bg-neutral-50 dark:border-neutral-700 dark:bg-neutral-800/90 dark:text-neutral-300 dark:hover:bg-neutral-700"
              >
                <svg
                  className="mr-2 h-5 w-5"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z" />
                </svg>
                Google
              </button>
              <button
                type="button"
                className="inline-flex items-center justify-center rounded-xl border border-neutral-300 bg-white px-4 py-2.5 text-neutral-700 shadow-sm transition-colors hover:bg-neutral-50 dark:border-neutral-700 dark:bg-neutral-800/90 dark:text-neutral-300 dark:hover:bg-neutral-700"
              >
                <svg
                  className="mr-2 h-5 w-5"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path d="M13.397,20.997v-8.196h2.765l0.411-3.209h-3.176V7.548c0-0.926,0.258-1.56,1.587-1.56h1.684V3.127 C15.849,3.039,15.025,2.997,14.201,3c-2.444,0-4.122,1.492-4.122,4.231v2.355H7.332v3.209h2.753v8.202H13.397z" />
                </svg>
                Facebook
              </button>
            </div>
          </div>

          <div className="mt-6 text-center">
            <p className="text-sm text-neutral-600 dark:text-neutral-400">
              Belum punya akun?{" "}
              <Link
                href="/register"
                className="font-semibold text-primary-400 hover:text-primary-500"
              >
                Daftar sekarang
              </Link>
            </p>
          </div>
        </div>
      </div>

      {/* Decorative elements */}
      <div className="pointer-events-none fixed -bottom-16 -left-16 h-64 w-64 rounded-full bg-primary-300/20 blur-3xl filter dark:bg-primary-600/10"></div>
      <div className="pointer-events-none fixed -top-32 right-10 h-96 w-96 rounded-full bg-coral-300/20 blur-3xl filter dark:bg-coral-600/10"></div>
      <div className="pointer-events-none fixed bottom-10 right-10 h-64 w-64 rounded-full bg-mint-300/20 blur-3xl filter dark:bg-mint-600/10"></div>
    </div>
  );
};

export default LoginPage;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\app\register\page.tsx ==== 
// src/app/register/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useDispatch, useSelector } from "react-redux";
import {
  FiEye,
  FiEyeOff,
  FiArrowLeft,
  FiMoon,
  FiSun,
  FiLock,
  FiMail,
  FiUser,
  FiBriefcase,
  FiAlertCircle,
  FiCheckCircle,
} from "react-icons/fi";
import { toggleTheme } from "@/redux/features/themeSlice";
import { RootState } from "@/redux/store";
import { useToast } from "@/components/ui/Toaster";
import Logo from "@/components/ui/Logo";
import Button from "@/components/ui/Button";
import { setCookie } from "cookies-next";
import { useAuth } from "@/contexts/AuthContext";

// Apply dark mode manually on client-side
const applyTheme = (isDark: boolean) => {
  if (isDark) {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
};

type FormErrors = {
  username?: string;
  email?: string;
  password?: string;
  full_name?: string;
  department?: string;
  confirm_password?: string;
};

const RegisterPage = () => {
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirm_password: "",
    full_name: "",
    department: "",
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [generalError, setGeneralError] = useState("");
  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [step, setStep] = useState(1); // 2-step registration process for better UX

  const router = useRouter();
  const dispatch = useDispatch();
  const darkMode = useSelector((state: RootState) => state.theme.darkMode);
  const { showToast } = useToast();
  // Gunakan useAuth hook dari AuthContext
  const { login } = useAuth();

  const handleThemeToggle = () => {
    dispatch(toggleTheme());
    // Also update the document class for immediate visual change
    applyTheme(!darkMode);
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    
    // Clear error for this field when user starts typing
    if (formErrors[name as keyof FormErrors]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  // Validate form fields
  const validateStep1 = () => {
    const errors: FormErrors = {};
    
    // Validate full name
    if (!formData.full_name.trim()) {
      errors.full_name = "Nama lengkap wajib diisi";
    } else if (formData.full_name.length < 3) {
      errors.full_name = "Nama lengkap minimal 3 karakter";
    }
    
    // Validate username
    if (!formData.username.trim()) {
      errors.username = "Username wajib diisi";
    } else if (formData.username.length < 3) {
      errors.username = "Username minimal 3 karakter";
    } else if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {
      errors.username = "Username hanya boleh berisi huruf, angka, dan underscore";
    }
    
    // Validate email
    if (!formData.email.trim()) {
      errors.email = "Email wajib diisi";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = "Format email tidak valid";
    }
    
    return errors;
  };
  
  const validateStep2 = () => {
    const errors: FormErrors = {};
    
    // Validate department
    if (!formData.department) {
      errors.department = "Departemen wajib dipilih";
    }
    
    // Validate password
    if (!formData.password) {
      errors.password = "Password wajib diisi";
    } else if (formData.password.length < 6) {
      errors.password = "Password minimal 6 karakter";
    } else if (!/(?=.*[a-zA-Z])(?=.*[0-9])/.test(formData.password)) {
      errors.password = "Password harus mengandung huruf dan angka";
    }
    
    // Validate confirm password
    if (formData.password !== formData.confirm_password) {
      errors.confirm_password = "Konfirmasi password tidak cocok";
    }
    
    return errors;
  };

  const nextStep = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate step 1 fields
    const errors = validateStep1();
    
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    
    // Proceed to step 2
    setStep(2);
    setFormErrors({});
  };

  const prevStep = () => {
    setStep(1);
    setGeneralError("");
    setFormErrors({});
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate step 2 fields
    const errors = validateStep2();
    
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    
    setGeneralError("");
    setIsLoading(true);

    // Remove confirm_password from the data sent to API
    const { confirm_password, ...registrationData } = formData;

    try {
      const response = await fetch("http://localhost:5000/api/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(registrationData),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        // Save tokens to localStorage
        localStorage.setItem("accessToken", data.accessToken);
        localStorage.setItem("refreshToken", data.refreshToken);
        
        // Set cookies for middleware
        setCookie("accessToken", data.accessToken, { maxAge: 60 * 60 * 24 });
        setCookie("refreshToken", data.refreshToken, { maxAge: 60 * 60 * 24 * 30 });

        showToast("Registrasi berhasil! Anda akan dialihkan ke dashboard", "success");
        
        // Login setelah registrasi berhasil (membuat session)
        await login(formData.email, formData.password, false);
        
        // Redirect dengan slight delay agar user dapat melihat pesan sukses
        setTimeout(() => {
          router.push("/dashboard");
        }, 1500);
      } else {
        if (data.field) {
          // Handle field-specific errors
          setFormErrors({
            ...formErrors,
            [data.field]: data.message
          });
        } else {
          // Handle general error
          setGeneralError(data.message || "Terjadi kesalahan saat mendaftar");
        }
      }
    } catch (err) {
      console.error("Registration error:", err);
      setGeneralError("Terjadi kesalahan koneksi ke server");
    } finally {
      setIsLoading(false);
    }
  };

  const departments = [
    "Pilih Departemen",
    "IT & Pengembangan",
    "Pemasaran & Penjualan",
    "Keuangan & Akuntansi",
    "Operasional",
    "Sumber Daya Manusia",
    "Penelitian & Pengembangan",
    "Layanan Pelanggan",
    "Desain & Kreatif",
    "Pendidikan",
    "Lainnya",
  ];

  return (
    <div className="flex min-h-screen bg-gradient-to-br from-white to-primary-50 dark:from-neutral-900 dark:to-primary-900/20">
      {/* Left side - Back button and theme toggle */}
      <div className="fixed left-4 top-4 z-10 flex items-center justify-between gap-4">
        <Link
          href="/"
          className="flex items-center text-neutral-600 transition-colors hover:text-primary-400 dark:text-neutral-300"
        >
          <FiArrowLeft className="mr-2" />
          <span className="hidden sm:inline">Kembali</span>
        </Link>
        <button
          onClick={handleThemeToggle}
          className="rounded-full p-2 text-neutral-700 transition-colors hover:bg-neutral-200/60 dark:text-neutral-200 dark:hover:bg-neutral-800/60"
          aria-label="Toggle theme"
        >
          {darkMode ? <FiSun size={20} /> : <FiMoon size={20} />}
        </button>
      </div>

      <div className="flex w-full flex-col items-center justify-center p-4 sm:p-8 md:p-12">
        <div className="w-full max-w-md rounded-2xl bg-white/80 p-8 shadow-xl backdrop-blur-sm dark:bg-neutral-800/80 sm:p-10">
          <div className="mb-6 flex flex-col items-center">
            <Logo className="mb-5" />
            <h1 className="mb-2 text-center font-poppins text-3xl font-bold tracking-tight text-neutral-900 dark:text-white">
              {step === 1 ? "Buat Akun" : "Sedikit Lagi!"}
            </h1>
            <p className="text-center text-neutral-600 dark:text-neutral-400">
              {step === 1
                ? "Bergabung dengan ROTASI untuk memulai perjalanan belajar"
                : "Lengkapi informasi untuk menyelesaikan pendaftaran"}
            </p>
          </div>

          {/* Progress bar */}
          <div className="mb-6 flex items-center justify-center">
            <div className="flex w-full max-w-[200px] items-center">
              <div
                className={`flex h-6 w-6 items-center justify-center rounded-full ${step >= 1 ? "bg-primary-400 text-white" : "bg-neutral-200 dark:bg-neutral-700"}`}
              >
                1
              </div>
              <div
                className={`h-1 flex-1 ${step >= 2 ? "bg-primary-400" : "bg-neutral-200 dark:bg-neutral-700"}`}
              ></div>
              <div
                className={`flex h-6 w-6 items-center justify-center rounded-full ${step >= 2 ? "bg-primary-400 text-white" : "bg-neutral-200 dark:bg-neutral-700"}`}
              >
                2
              </div>
            </div>
          </div>

          {generalError && (
            <div className="mb-6 flex items-center rounded-lg bg-red-50 p-4 text-sm text-red-500 dark:bg-red-900/20">
              <FiAlertCircle className="mr-2 flex-shrink-0" />
              <span>{generalError}</span>
            </div>
          )}

          {step === 1 ? (
            <form className="space-y-4" onSubmit={nextStep}>
              <div className="space-y-1">
                <label
                  htmlFor="full_name"
                  className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
                >
                  Nama Lengkap <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                    <FiUser size={18} />
                  </div>
                  <input
                    id="full_name"
                    name="full_name"
                    type="text"
                    autoComplete="name"
                    required
                    value={formData.full_name}
                    onChange={handleChange}
                    className={`block w-full rounded-xl border ${
                      formErrors.full_name 
                        ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                        : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                    } px-3 py-3 pl-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                    placeholder="Nama lengkap Anda"
                  />
                </div>
                {formErrors.full_name && (
                  <p className="mt-1 text-sm text-red-500">{formErrors.full_name}</p>
                )}
              </div>

              <div className="space-y-1">
                <label
                  htmlFor="username"
                  className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
                >
                  Username <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                    <FiUser size={18} />
                  </div>
                  <input
                    id="username"
                    name="username"
                    type="text"
                    autoComplete="username"
                    required
                    value={formData.username}
                    onChange={handleChange}
                    className={`block w-full rounded-xl border ${
                      formErrors.username 
                        ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                        : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                    } px-3 py-3 pl-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                    placeholder="Username yang unik"
                  />
                </div>
                {formErrors.username && (
                  <p className="mt-1 text-sm text-red-500">{formErrors.username}</p>
                )}
              </div>

              <div className="space-y-1">
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
                >
                  Email <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                    <FiMail size={18} />
                  </div>
                  <input
                    id="email"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    value={formData.email}
                    onChange={handleChange}
                    className={`block w-full rounded-xl border ${
                      formErrors.email 
                        ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                        : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                    } px-3 py-3 pl-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                    placeholder="nama@email.com"
                  />
                </div>
                {formErrors.email && (
                  <p className="mt-1 text-sm text-red-500">{formErrors.email}</p>
                )}
              </div>

              <div className="pt-2">
                <Button
                  type="submit"
                  variant="primary"
                  fullWidth
                  className="rounded-xl py-3 transition-all hover:shadow-lg"
                >
                  Lanjutkan
                </Button>
              </div>
            </form>
          ) : (
            // ... (kode lainnya sama dengan sebelumnya) ...
            <form className="space-y-4" onSubmit={handleSubmit}>
              <div className="space-y-1">
                <label
                  htmlFor="department"
                  className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
                >
                  Departemen <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                    <FiBriefcase size={18} />
                  </div>
                  <select
                    id="department"
                    name="department"
                    required
                    value={formData.department}
                    onChange={handleChange}
                    className={`block w-full rounded-xl border ${
                      formErrors.department 
                        ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                        : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                    } px-3 py-3 pl-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                  >
                    {departments.map((dept, index) => (
                      <option
                        key={index}
                        value={index === 0 ? "" : dept}
                        disabled={index === 0}
                      >
                        {dept}
                      </option>
                    ))}
                  </select>
                </div>
                {formErrors.department && (
                  <p className="mt-1 text-sm text-red-500">{formErrors.department}</p>
                )}
              </div>

              <div className="space-y-1">
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
                >
                  Password <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                    <FiLock size={18} />
                  </div>
                  <input
                    id="password"
                    name="password"
                    type={showPassword ? "text" : "password"}
                    autoComplete="new-password"
                    required
                    value={formData.password}
                    onChange={handleChange}
                    className={`block w-full rounded-xl border ${
                      formErrors.password 
                        ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                        : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                    } px-3 py-3 pl-10 pr-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                    placeholder="Buat password"
                    minLength={6}
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 flex items-center px-3 text-neutral-500 transition-colors hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <FiEyeOff size={18} />
                    ) : (
                      <FiEye size={18} />
                    )}
                  </button>
                </div>
                {formErrors.password ? (
                  <p className="mt-1 text-sm text-red-500">{formErrors.password}</p>
                ) : (
                  <p className="mt-1 text-xs text-neutral-500 dark:text-neutral-400">
                    Minimal 6 karakter, kombinasi huruf dan angka
                  </p>
                )}
              </div>

              <div className="space-y-1">
                <label
                  htmlFor="confirm_password"
                  className="block text-sm font-medium text-neutral-700 dark:text-neutral-300"
                >
                  Konfirmasi Password <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 flex items-center pl-3 text-neutral-500 dark:text-neutral-400">
                    <FiLock size={18} />
                  </div>
                  <input
                    id="confirm_password"
                    name="confirm_password"
                    type={showConfirmPassword ? "text" : "password"}
                    autoComplete="new-password"
                    required
                    value={formData.confirm_password}
                    onChange={handleChange}
                    className={`block w-full rounded-xl border ${
                      formErrors.confirm_password 
                        ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/10" 
                        : "border-neutral-300 bg-white dark:border-neutral-700 dark:bg-neutral-800/90"
                    } px-3 py-3 pl-10 pr-10 shadow-sm transition-colors focus:border-primary-400 focus:outline-none focus:ring-primary-400 dark:text-white dark:focus:border-primary-400`}
                    placeholder="Konfirmasi password"
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 flex items-center px-3 text-neutral-500 transition-colors hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    {showConfirmPassword ? (
                      <FiEyeOff size={18} />
                    ) : (
                      <FiEye size={18} />
                    )}
                  </button>
                </div>
                {formErrors.confirm_password && (
                  <p className="mt-1 text-sm text-red-500">{formErrors.confirm_password}</p>
                )}
              </div>

              <div className="flex space-x-4 pt-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={prevStep}
                  className="flex-1 rounded-xl py-3"
                >
                  Kembali
                </Button>
                <Button
                  type="submit"
                  variant="primary"
                  className="flex-1 rounded-xl py-3 transition-all hover:shadow-lg"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <div className="flex items-center">
                      <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent"></span>
                      Mendaftar...
                    </div>
                  ) : (
                    "Daftar"
                  )}
                </Button>
              </div>
            </form>
          )}

          <div className="mt-6 text-center">
            <p className="text-sm text-neutral-600 dark:text-neutral-400">
              Sudah punya akun?{" "}
              <Link
                href="/login"
                className="font-semibold text-primary-400 hover:text-primary-500"
              >
                Masuk
              </Link>
            </p>
          </div>

          <div className="mt-8 text-center text-xs text-neutral-500 dark:text-neutral-400">
            Dengan mendaftar, Anda menyetujui{" "}
            <Link
              href="/syarat-ketentuan"
              className="text-primary-400 hover:text-primary-500"
            >
              Syarat & Ketentuan
            </Link>{" "}
            dan{" "}
            <Link
              href="/kebijakan-privasi"
              className="text-primary-400 hover:text-primary-500"
            >
              Kebijakan Privasi
            </Link>{" "}
            kami.
          </div>
        </div>
      </div>

      {/* Decorative elements */}
      <div className="pointer-events-none fixed -bottom-16 -left-16 h-64 w-64 rounded-full bg-primary-300/20 blur-3xl filter dark:bg-primary-600/10"></div>
      <div className="pointer-events-none fixed -top-32 right-10 h-96 w-96 rounded-full bg-coral-300/20 blur-3xl filter dark:bg-coral-600/10"></div>
      <div className="pointer-events-none fixed bottom-10 right-10 h-64 w-64 rounded-full bg-mint-300/20 blur-3xl filter dark:bg-mint-600/10"></div>
    </div>
  );
};

export default RegisterPage;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\ThemeProvider.tsx ==== 
'use client';

import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { setTheme } from '@/redux/features/themeSlice';

export default function ThemeProvider() {
  const [mounted, setMounted] = useState(false);
  const dispatch = useDispatch();

  useEffect(() => {
    // Initialize theme from localStorage
    const savedTheme = localStorage.getItem('darkMode');
    if (savedTheme !== null) {
      const isDarkMode = savedTheme === 'true';
      
      if (isDarkMode) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      
      dispatch(setTheme(isDarkMode));
    } else {
      // Check for system preference
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      if (prefersDark) {
        document.documentElement.classList.add('dark');
      }
      
      localStorage.setItem('darkMode', prefersDark.toString());
      dispatch(setTheme(prefersDark));
    }

    setMounted(true);
  }, [dispatch]);

  return null; // This component doesn't render anything
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\course\CourseCard.tsx ==== 
// src/components/course/CourseCard.tsx
import { useState } from "react";
import Image from "next/image";
import Link from "next/link";
import Button from "@/components/ui/Button";
import { FiPlay, FiEdit, FiClock, FiUsers, FiBarChart2, FiMoreHorizontal } from "react-icons/fi";

type CourseCardProps = {
  course: any;
  userRole: string;
  className?: string;
};

const CourseCard = ({ course, userRole, className = "" }: CourseCardProps) => {
  // Handle different course data structure based on role
  const courseData = course.course || course;
  const progressPercentage = userRole === "student" ? course.progress_percentage || 0 : null;
  
  const getLessonId = () => {
    if (course.last_accessed_lesson) {
      return course.last_accessed_lesson;
    }

    if (courseData.modules && courseData.modules.length > 0) {
      const firstModule = courseData.modules[0];
      if (firstModule.lessons && firstModule.lessons.length > 0) {
        return firstModule.lessons[0].id;
      }
    }

    return 0;
  };

  return (
    <div className={`overflow-hidden rounded-lg border border-neutral-200 bg-white shadow-sm transition-all hover:shadow-md dark:border-neutral-700 dark:bg-neutral-800 ${className}`}>
      <div className="relative h-36">
        <Image
          src={courseData.thumbnail_url || "/images/course-placeholder.jpg"}
          alt={courseData.title}
          fill
          className="object-cover"
        />
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-3">
          <div className="flex items-center justify-between">
            <span className="rounded-full bg-white/90 px-2 py-1 text-xs font-medium text-neutral-800">
              {course.completion_status === "completed"
                ? "Selesai"
                : course.completion_status === "in_progress"
                  ? "Sedang Dipelajari"
                  : "Belum Dimulai"}
            </span>
            <button className="rounded-full bg-white/90 p-1.5">
              <FiMoreHorizontal size={16} className="text-neutral-700" />
            </button>
          </div>
        </div>
      </div>
      <div className="p-4">
        <h3 className="mb-2 font-semibold line-clamp-2">{courseData.title}</h3>

        {userRole === "student" && typeof progressPercentage === "number" && (
          <>
            <div className="mb-3 flex items-center justify-between text-sm text-neutral-500">
              <span>Progress</span>
              <span>{progressPercentage}%</span>
            </div>
            <div className="mb-4 h-1.5 w-full overflow-hidden rounded-full bg-neutral-200 dark:bg-neutral-700">
              <div
                className="h-full rounded-full bg-primary-400"
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
          </>
        )}

        <div className="mb-3 flex flex-wrap gap-2 text-xs">
          <span className="flex items-center text-neutral-500 dark:text-neutral-400">
            <FiClock className="mr-1" />
            {courseData.duration_hours || 0} jam
          </span>
          
          <span className="flex items-center text-neutral-500 dark:text-neutral-400">
            <FiUsers className="mr-1" />
            {courseData.enrollmentCount || courseData.enrollment_count || 0} siswa
          </span>
          
          <span className="flex items-center text-neutral-500 dark:text-neutral-400">
            <FiBarChart2 className="mr-1" />
            {courseData.level || "Pemula"}
          </span>
        </div>

        {userRole === "student" ? (
          <Link
            href={`/dashboard/courses/${course.course_id || courseData.id}/learn/${getLessonId()}`}
          >
            <Button
              fullWidth
              className="flex items-center justify-center gap-2 rounded-lg"
            >
              <FiPlay size={16} />
              {course.completion_status === "not_started"
                ? "Mulai Belajar"
                : "Lanjutkan Belajar"}
            </Button>
          </Link>
        ) : (
          <Link href={`/dashboard/courses/${courseData.id}/manage`}>
            <Button
              fullWidth
              className="flex items-center justify-center gap-2 rounded-lg"
            >
              <FiEdit size={16} />
              Kelola Kursus
            </Button>
          </Link>
        )}
      </div>
    </div>
  );
};

export default CourseCard;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\layout\DashboardLayout.tsx ==== 
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter, usePathname } from "next/navigation";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "@/redux/store";
import { toggleTheme } from "@/redux/features/themeSlice";
import Logo from "@/components/ui/Logo";
import { Toaster } from "@/components/ui/Toaster";
import {
  FiHome,
  FiBook,
  FiAward,
  FiSettings,
  FiUser,
  FiBell,
  FiLogOut,
  FiMenu,
  FiX,
  FiSun,
  FiMoon,
  FiMessageSquare,
  FiBarChart2,
} from "react-icons/fi";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [user, setUser] = useState<any>(null);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [unreadNotifications, setUnreadNotifications] = useState(0);
  const router = useRouter();
  const pathname = usePathname();
  const darkMode = useSelector((state: RootState) => state.theme.darkMode);
  const dispatch = useDispatch();

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const token = localStorage.getItem("accessToken");

        if (!token) {
          router.push("/login");
          return;
        }

        const response = await fetch("http://localhost:5000/api/auth/me", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          if (response.status === 401) {
            localStorage.removeItem("accessToken");
            router.push("/login");
            return;
          }
          throw new Error("Failed to fetch user data");
        }

        const data = await response.json();
        setUser(data.user);

        // Count unread notifications
        if (data.notifications) {
          const unread = data.notifications.filter(
            (n: any) => !n.is_read
          ).length;
          setUnreadNotifications(unread);
        }
      } catch (error) {
        console.error("User data fetch error:", error);
      }
    };

    fetchUserData();
  }, [router]);

  useEffect(() => {
    // Close sidebar when route changes on mobile
    setIsSidebarOpen(false);
  }, [pathname]);

  const handleLogout = () => {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    router.push("/login");
  };

  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);
  const handleThemeToggle = () => dispatch(toggleTheme());

  // Define navigation items based on user role
  let navItems = [{ href: "/dashboard", label: "Dashboard", icon: <FiHome /> }];

  if (user) {
    if (user.role === "student") {
      navItems = [
        ...navItems,
        { href: "/dashboard/courses", label: "Kursus Saya", icon: <FiBook /> },
        {
          href: "/dashboard/certificates",
          label: "Sertifikat",
          icon: <FiAward />,
        },
        {
          href: "/dashboard/discussions",
          label: "Diskusi",
          icon: <FiMessageSquare />,
        },
      ];
    } else if (user.role === "instructor") {
      navItems = [
        ...navItems,
        { href: "/dashboard/courses", label: "Kursus Saya", icon: <FiBook /> },
        { href: "/dashboard/students", label: "Siswa", icon: <FiUser /> },
        {
          href: "/dashboard/discussions",
          label: "Diskusi",
          icon: <FiMessageSquare />,
        },
        {
          href: "/dashboard/analytics",
          label: "Analitik",
          icon: <FiBarChart2 />,
        },
      ];
    } else if (user.role === "admin") {
      navItems = [
        ...navItems,
        { href: "/dashboard/users", label: "Pengguna", icon: <FiUser /> },
        { href: "/dashboard/courses", label: "Kursus", icon: <FiBook /> },
        {
          href: "/dashboard/categories",
          label: "Kategori",
          icon: <FiBarChart2 />,
        },
      ];
    }
  }

  // Common nav items for all roles
  navItems = [
    ...navItems,
    { href: "/dashboard/settings", label: "Pengaturan", icon: <FiSettings /> },
  ];

  return (
    <div className="flex min-h-screen bg-neutral-50 text-neutral-900 dark:bg-neutral-900 dark:text-neutral-50">
      {/* Mobile sidebar backdrop */}
      {isSidebarOpen && (
        <div
          className="fixed inset-0 z-20 bg-neutral-900/50 backdrop-blur-sm lg:hidden"
          onClick={toggleSidebar}
        ></div>
      )}

      {/* Sidebar */}
      <aside
        className={`fixed inset-y-0 left-0 z-30 w-64 transform bg-white p-4 shadow-lg transition-transform dark:bg-neutral-800 lg:static lg:translate-x-0 ${
          isSidebarOpen ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        <div className="flex h-full flex-col">
          <div className="mb-6 flex items-center justify-between">
            <Logo />
            <button
              onClick={toggleSidebar}
              className="rounded-lg p-2 text-neutral-500 hover:bg-neutral-100 lg:hidden dark:text-neutral-400 dark:hover:bg-neutral-700"
            >
              <FiX size={20} />
            </button>
          </div>

          <nav className="flex-1 space-y-1">
            {navItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                className={`flex items-center rounded-lg px-3 py-2 text-sm font-medium transition-colors ${
                  pathname === item.href
                    ? "bg-primary-50 text-primary-600 dark:bg-primary-900/20 dark:text-primary-400"
                    : "text-neutral-700 hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-700/50"
                }`}
              >
                <span className="mr-3">{item.icon}</span>
                {item.label}
              </Link>
            ))}
          </nav>

          <div className="border-t border-neutral-200 pt-4 dark:border-neutral-700">
            <button
              onClick={handleLogout}
              className="flex w-full items-center rounded-lg px-3 py-2 text-sm font-medium text-neutral-700 transition-colors hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-700/50"
            >
              <FiLogOut className="mr-3" />
              Keluar
            </button>
          </div>
        </div>
      </aside>

      {/* Main content */}
      <div className="flex w-full flex-col">
        {/* Top navigation */}
        <header className="border-b border-neutral-200 bg-white shadow-sm dark:border-neutral-700 dark:bg-neutral-800">
          <div className="flex h-16 items-center justify-between px-4">
            <button
              onClick={toggleSidebar}
              className="rounded-lg p-2 text-neutral-500 hover:bg-neutral-100 lg:hidden dark:text-neutral-400 dark:hover:bg-neutral-700"
            >
              <FiMenu size={20} />
            </button>

            <div className="ml-auto flex items-center gap-4">
              <button
                onClick={handleThemeToggle}
                className="rounded-full p-2 text-neutral-600 transition-colors hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-700"
                aria-label="Toggle theme"
              >
                {darkMode ? <FiSun size={20} /> : <FiMoon size={20} />}
              </button>

              <Link
                href="/dashboard/notifications"
                className="relative rounded-full p-2 text-neutral-600 transition-colors hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-700"
              >
                <FiBell size={20} />
                {unreadNotifications > 0 && (
                  <span className="absolute right-1 top-1 flex h-4 w-4 items-center justify-center rounded-full bg-primary-400 text-[10px] text-white">
                    {unreadNotifications > 9 ? "9+" : unreadNotifications}
                  </span>
                )}
              </Link>

              <div className="relative">
                <button className="flex items-center gap-2 rounded-full transition-colors hover:bg-neutral-100 dark:hover:bg-neutral-700">
                  <Link
                    href="/dashboard/profile"
                    className="flex items-center gap-2 rounded-full transition-colors hover:bg-neutral-100 dark:hover:bg-neutral-700"
                  >
                    <div className="flex h-8 w-8 items-center justify-center overflow-hidden rounded-full bg-primary-100 text-primary-600 dark:bg-primary-900/30 dark:text-primary-400">
                      {user?.full_name?.charAt(0) || <FiUser />}
                    </div>
                  </Link>
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Page content */}
        <main className="flex-1">{children}</main>
      </div>
      <Toaster />
    </div>
  );
}
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\layout\Footer.tsx ==== 
import Link from 'next/link';
import Logo from '@/components/ui/Logo';
import { FiInstagram, FiTwitter, FiLinkedin, FiYoutube } from 'react-icons/fi';

const Footer = () => {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="bg-neutral-100 py-12 dark:bg-neutral-800">
      <div className="container mx-auto px-4 md:px-8">
        <div className="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-4">
          <div className="space-y-4">
            <Logo />
            <p className="text-neutral-600 dark:text-neutral-300">
              Repositori Online untuk Pelatihan dan Informasi - Solusi pembelajaran modern untuk generasi digital.
            </p>
            <div className="flex space-x-4">
              <a
                href="#"
                className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                aria-label="Instagram"
              >
                <FiInstagram size={20} />
              </a>
              <a
                href="#"
                className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                aria-label="Twitter"
              >
                <FiTwitter size={20} />
              </a>
              <a
                href="#"
                className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                aria-label="LinkedIn"
              >
                <FiLinkedin size={20} />
              </a>
              <a
                href="#"
                className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                aria-label="YouTube"
              >
                <FiYoutube size={20} />
              </a>
            </div>
          </div>

          <div>
            <h3 className="mb-4 font-poppins text-lg font-semibold">Platform</h3>
            <ul className="space-y-2">
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Kursus
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Jalur Belajar
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Sertifikasi
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Menjadi Instruktur
                </Link>
              </li>
            </ul>
          </div>

          <div>
            <h3 className="mb-4 font-poppins text-lg font-semibold">Perusahaan</h3>
            <ul className="space-y-2">
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Tentang Kami
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Karir
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Blog
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Partner
                </Link>
              </li>
            </ul>
          </div>

          <div>
            <h3 className="mb-4 font-poppins text-lg font-semibold">Dukungan</h3>
            <ul className="space-y-2">
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Bantuan
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  FAQ
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Kontak
                </Link>
              </li>
              <li>
                <Link
                  href="#"
                  className="text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
                >
                  Kebijakan Privasi
                </Link>
              </li>
            </ul>
          </div>
        </div>

        <div className="mt-12 border-t border-neutral-200 pt-8 dark:border-neutral-700">
          <div className="flex flex-col items-center justify-between space-y-4 md:flex-row md:space-y-0">
            <p className="text-center text-sm text-neutral-600 dark:text-neutral-400">
              &copy; {currentYear} ROTASI Learning Management System. Seluruh hak cipta dilindungi.
            </p>
            <div className="flex space-x-6">
              <Link
                href="#"
                className="text-sm text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
              >
                Syarat & Ketentuan
              </Link>
              <Link
                href="#"
                className="text-sm text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
              >
                Kebijakan Privasi
              </Link>
              <Link
                href="#"
                className="text-sm text-neutral-600 transition-colors hover:text-primary-500 dark:text-neutral-400 dark:hover:text-primary-400"
              >
                Cookies
              </Link>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\layout\Header.tsx ==== 
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import { toggleTheme } from "@/redux/features/themeSlice";
import { FiSun, FiMoon, FiMenu, FiX } from "react-icons/fi";
import Button from "@/components/ui/Button";
import Logo from "@/components/ui/Logo";

const Header = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isMounted, setIsMounted] = useState(false);
  const darkMode = useSelector((state: RootState) => state.theme.darkMode);
  const dispatch = useDispatch();

  useEffect(() => {
    setIsMounted(true);

    const handleScroll = () => {
      if (window.scrollY > 10) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);
  const handleThemeToggle = () => dispatch(toggleTheme());

  // Render theme button only after client-side hydration
  const renderThemeButton = () => {
    if (!isMounted) return null;

    return (
      <button
        onClick={handleThemeToggle}
        className="rounded-full p-2 text-neutral-700 transition-colors hover:bg-neutral-200 dark:text-neutral-200 dark:hover:bg-neutral-800"
        aria-label="Toggle theme"
      >
        {darkMode ? <FiSun size={20} /> : <FiMoon size={20} />}
      </button>
    );
  };

  return (
    <header
      className={`fixed left-0 right-0 top-0 z-50 transition-all duration-300 ${
        isScrolled
          ? "bg-white/90 shadow backdrop-blur-md dark:bg-neutral-900/90"
          : "bg-transparent"
      }`}
    >
      <div className="container mx-auto flex items-center justify-between px-4 py-4 md:px-8">
        <Logo />

        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center">
          <nav className="mr-8">
            <ul className="flex items-center space-x-8">
              <li>
                <Link
                  href="#features"
                  className="text-neutral-700 transition-colors hover:text-primary-400 dark:text-neutral-200 dark:hover:text-primary-400"
                >
                  Fitur
                </Link>
              </li>
              <li>
                <Link
                  href="#courses"
                  className="text-neutral-700 transition-colors hover:text-primary-400 dark:text-neutral-200 dark:hover:text-primary-400"
                >
                  Kursus
                </Link>
              </li>
              <li>
                <Link
                  href="#testimonials"
                  className="text-neutral-700 transition-colors hover:text-primary-400 dark:text-neutral-200 dark:hover:text-primary-400"
                >
                  Testimoni
                </Link>
              </li>
            </ul>
          </nav>

          <div className="flex items-center space-x-4">
            <Link href="/login">
              <Button variant="outline" size="sm" className="rounded-xl">
                Masuk
              </Button>
            </Link>
            <Link href="/register">
              <Button variant="primary" size="sm" className="rounded-xl">
                Daftar
              </Button>
            </Link>
            {renderThemeButton()}
          </div>
        </div>

        {/* Mobile Menu */}
        <div className="flex items-center md:hidden">
          {renderThemeButton()}
          <button
            onClick={toggleMenu}
            className="ml-4 rounded-full p-2 text-neutral-700 transition-colors hover:bg-neutral-200 dark:text-neutral-200 dark:hover:bg-neutral-800"
            aria-label="Toggle menu"
          >
            {isMenuOpen ? <FiX size={24} /> : <FiMenu size={24} />}
          </button>
        </div>

        {/* Mobile Menu Dropdown */}
        {isMenuOpen && (
          <div className="absolute left-0 right-0 top-full z-20 bg-white p-4 shadow-md dark:bg-neutral-900 md:hidden">
            <nav className="flex flex-col space-y-4">
              <Link
                href="#features"
                className="text-neutral-700 transition-colors hover:text-primary-400 dark:text-neutral-200 dark:hover:text-primary-400"
                onClick={() => setIsMenuOpen(false)}
              >
                Fitur
              </Link>
              <Link
                href="#courses"
                className="text-neutral-700 transition-colors hover:text-primary-400 dark:text-neutral-200 dark:hover:text-primary-400"
                onClick={() => setIsMenuOpen(false)}
              >
                Kursus
              </Link>
              <Link
                href="#testimonials"
                className="text-neutral-700 transition-colors hover:text-primary-400 dark:text-neutral-200 dark:hover:text-primary-400"
                onClick={() => setIsMenuOpen(false)}
              >
                Testimoni
              </Link>
              <div className="flex flex-col space-y-2 pt-4">
                <Link href="/login" onClick={() => setIsMenuOpen(false)}>
                  <Button variant="outline" fullWidth className="rounded-xl">
                    Masuk
                  </Button>
                </Link>
                <Link href="/register" onClick={() => setIsMenuOpen(false)}>
                  <Button variant="primary" fullWidth className="rounded-xl">
                    Daftar
                  </Button>
                </Link>
              </div>
            </nav>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\layout\MainLayout.tsx ==== 
'use client';

import { useEffect } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '@/redux/store';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';
import { Toaster } from '@/components/ui/Toaster';

export default function MainLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const darkMode = useSelector((state: RootState) => state.theme.darkMode);

  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  return (
    <div className="flex min-h-screen flex-col bg-neutral-50 text-neutral-900 antialiased transition-colors duration-200 dark:bg-neutral-900 dark:text-neutral-50">
      <Header />
      <main className="flex-grow">{children}</main>
      <Footer />
      <Toaster />
    </div>
  );
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\notifications\NotificationList.tsx ==== 
// src/components/notifications/NotificationList.tsx
import Link from "next/link";
import { formatDate } from "@/utils/date";
import { FiAward, FiBook, FiClock } from "react-icons/fi";

type NotificationProps = {
  notifications: any[];
  emptyMessage?: string;
  maxItems?: number;
  showViewAll?: boolean;
  className?: string;
};

const NotificationList = ({
  notifications,
  emptyMessage = "Belum ada notifikasi",
  maxItems = 5,
  showViewAll = true,
  className = "",
}: NotificationProps) => {
  // Helper function to get the appropriate icon
  const getNotificationIcon = (type: string) => {
    switch (type) {
      case "course_completed":
      case "certificate":
        return <FiAward />;
      case "enrollment":
        return <FiBook />;
      default:
        return <FiClock />;
    }
  };

  if (notifications.length === 0) {
    return (
      <div className="rounded-lg border border-neutral-200 bg-white p-6 text-center shadow-sm dark:border-neutral-700 dark:bg-neutral-800">
        <p className="text-neutral-600 dark:text-neutral-400">
          {emptyMessage}
        </p>
      </div>
    );
  }

  return (
    <div className={`rounded-lg border border-neutral-200 bg-white shadow-sm dark:border-neutral-700 dark:bg-neutral-800 ${className}`}>
      {notifications
        .slice(0, maxItems)
        .map((notification, index) => (
          <div
            key={notification.id}
            className={`flex items-start justify-between p-4 ${
              index !== notifications.slice(0, maxItems).length - 1
                ? "border-b border-neutral-200 dark:border-neutral-700"
                : ""
            }`}
          >
            <div className="flex items-start gap-3">
              <span className="flex h-8 w-8 items-center justify-center rounded-full bg-neutral-100 text-primary-600 dark:bg-neutral-700 dark:text-primary-400">
                {getNotificationIcon(notification.type)}
              </span>
              <div>
                <p className="text-neutral-700 dark:text-neutral-300">
                  {notification.message}
                </p>
                <p className="text-xs text-neutral-500">
                  {formatDate(notification.created_at, {
                    day: "numeric",
                    month: "short",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </p>
              </div>
            </div>
            {!notification.is_read && (
              <span className="h-2 w-2 rounded-full bg-primary-400"></span>
            )}
          </div>
        ))}

      {showViewAll && notifications.length > 0 && (
        <div className="border-t border-neutral-200 p-4 text-center dark:border-neutral-700">
          <Link
            href="/dashboard/notifications"
            className="text-sm text-primary-400 hover:text-primary-500"
          >
            Lihat semua notifikasi
          </Link>
        </div>
      )}
    </div>
  );
};

export default NotificationList;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\sections\CoursesSection.tsx ==== 
"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import Image from "next/image";
import Button from "@/components/ui/Button";
import { FiClock, FiStar, FiUsers, FiBookmark } from "react-icons/fi";
import Link from "next/link";

const categories = [
  { id: "all", name: "Semua Kursus" },
  { id: "programming", name: "Pemrograman" },
  { id: "design", name: "Desain" },
  { id: "business", name: "Bisnis" },
  { id: "marketing", name: "Marketing" },
];

const courses = [
  {
    id: 1,
    title: "Dasar-Dasar React.js untuk Pemula",
    description:
      "Pelajari dasar-dasar React.js untuk membangun aplikasi web modern yang responsif dan interaktif.",
    instructor: "Budi Santoso",
    duration: "12 jam",
    level: "Pemula",
    students: 1245,
    rating: 4.7,
    category: "programming",
    image: "/images/course-react.jpg",
  },
  {
    id: 2,
    title: "UI/UX Design Fundamentals",
    description:
      "Kuasai prinsip-prinsip dan praktik terbaik dalam merancang antarmuka pengguna yang efektif.",
    instructor: "Diana Putri",
    duration: "18 jam",
    level: "Menengah",
    students: 980,
    rating: 4.9,
    category: "design",
    image: "/images/course-ux.jpg",
  },
  {
    id: 3,
    title: "Digital Marketing Strategy",
    description:
      "Strategi pemasaran digital terbaru untuk meningkatkan brand awareness dan konversi.",
    instructor: "Rudi Hartono",
    duration: "15 jam",
    level: "Semua Level",
    students: 1850,
    rating: 4.6,
    category: "marketing",
    image: "/images/course-marketing.jpg",
  },
  {
    id: 4,
    title: "E-Commerce Business Masterclass",
    description:
      "Panduan lengkap membangun dan mengembangkan bisnis e-commerce yang sukses dari nol.",
    instructor: "Sinta Wijaya",
    duration: "24 jam",
    level: "Lanjutan",
    students: 756,
    rating: 4.8,
    category: "business",
    image: "/images/course-business.jpg",
  },
];

const CoursesSection = () => {
  const [activeCategory, setActiveCategory] = useState("all");

  const filteredCourses =
    activeCategory === "all"
      ? courses
      : courses.filter((course) => course.category === activeCategory);

  return (
    <section
      id="courses"
      className="bg-neutral-50 py-20 dark:bg-neutral-800/30"
    >
      <div className="container mx-auto px-4 md:px-8">
        <motion.div
          className="mx-auto mb-16 max-w-3xl text-center"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
        >
          <h2 className="mb-4 font-poppins text-3xl font-bold md:text-4xl">
            Jelajahi Kursus Kami
          </h2>
          <p className="text-lg text-neutral-600 dark:text-neutral-300">
            Pilih dari berbagai kursus berkualitas tinggi yang dirancang oleh
            para ahli
          </p>
        </motion.div>

        <div className="mb-8 flex items-center justify-center">
          <div className="flex flex-wrap justify-center gap-2">
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => setActiveCategory(category.id)}
                className={`rounded-full px-4 py-2 text-sm font-medium transition-colors ${
                  activeCategory === category.id
                    ? "bg-primary-400 text-white"
                    : "bg-white text-neutral-600 hover:bg-neutral-100 dark:bg-neutral-800 dark:text-neutral-300 dark:hover:bg-neutral-700"
                }`}
              >
                {category.name}
              </button>
            ))}
          </div>
        </div>

        <motion.div className="grid gap-8 sm:grid-cols-2 lg:grid-cols-4" layout>
          {filteredCourses.map((course) => (
            <motion.div
              key={course.id}
              layout
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ duration: 0.3 }}
              className="group overflow-hidden rounded-xl bg-white shadow-md transition-all hover:shadow-lg dark:bg-neutral-800"
            >
              <div className="relative h-48 overflow-hidden">
                <Image
                  src={course.image}
                  alt={course.title}
                  className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
                  width={400}
                  height={200}
                />
                <button className="absolute right-3 top-3 flex h-8 w-8 items-center justify-center rounded-full bg-white/80 text-neutral-600 backdrop-blur-sm transition-colors hover:bg-white hover:text-primary-400 dark:bg-neutral-800/80 dark:text-neutral-300">
                  <FiBookmark size={16} />
                </button>
              </div>
              <div className="p-5">
                <h3 className="mb-2 font-poppins text-lg font-semibold line-clamp-2">
                  {course.title}
                </h3>
                <p className="mb-4 text-sm text-neutral-600 dark:text-neutral-400 line-clamp-2">
                  {course.description}
                </p>
                <div className="mb-3 flex items-center justify-between text-sm">
                  <span className="flex items-center text-neutral-500 dark:text-neutral-400">
                    <FiClock className="mr-1" size={14} />
                    {course.duration}
                  </span>
                  <span className="flex items-center text-neutral-500 dark:text-neutral-400">
                    <FiUsers className="mr-1" size={14} />
                    {course.students}
                  </span>
                  <span className="flex items-center font-medium text-amber-500">
                    <FiStar className="mr-1" size={14} />
                    {course.rating}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-neutral-500 dark:text-neutral-400">
                    {course.instructor}
                  </span>
                  <span className="rounded-full bg-primary-100 px-2 py-1 text-xs font-medium text-primary-600 dark:bg-primary-900/30 dark:text-primary-400">
                    {course.level}
                  </span>
                </div>
              </div>
              <div className="border-t border-neutral-100 px-5 py-3 dark:border-neutral-700">
                <Link href={`/courses/${course.id}`}>
                  <Button variant="primary" fullWidth>
                    Lihat Kursus
                  </Button>
                </Link>
              </div>
            </motion.div>
          ))}
        </motion.div>

        <div className="mt-12 text-center">
          <Button size="lg" variant="outline">
            Lihat Semua Kursus
          </Button>
        </div>
      </div>
    </section>
  );
};

export default CoursesSection;
==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\sections\CtaSection.tsx ==== 
'use client';

import { motion } from 'framer-motion';
import Link from 'next/link';
import Button from '@/components/ui/Button';
import { FiArrowRight } from 'react-icons/fi';

const CtaSection = () => {
  return (
    <section className="bg-gradient-to-r from-primary-500 to-primary-600 py-20 text-white">
      <div className="container mx-auto px-4 md:px-8">
        <div className="mx-auto max-w-4xl text-center">
          <motion.h2 
            className="mb-6 font-poppins text-3xl font-bold md:text-4xl"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            Mulai Perjalanan Belajar Anda Sekarang
          </motion.h2>
          
          <motion.p 
            className="mb-8 text-lg opacity-90"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            Daftar dan dapatkan akses ke kursus dan materi pengantar. Tingkatkan keterampilan Anda dan buka peluang karir baru.
          </motion.p>
          
          <motion.div
            className="flex flex-col gap-4 sm:flex-row sm:justify-center"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Link href="/register">
              <button
                type="button"
                className="inline-flex items-center rounded-xl px-6 py-3 text-lg font-semibold text-primary-600 transition-all duration-200 bg-white border border-primary-300 shadow-sm hover:bg-primary-50 hover:border-primary-500 hover:shadow-lg"
              >
                Daftar
                <FiArrowRight className="ml-2 text-xl" />
              </button>
            </Link>
            <Link href="/login">
              <Button 
                size="lg" 
                variant="outline" 
                className="rounded-xl border-white text-white hover:bg-white/10"
              >
                Masuk
              </Button>
            </Link>
          </motion.div>
        </div>
      </div>
    </section>
  );
};

export default CtaSection;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\sections\FeaturesSection.tsx ==== 
'use client';

import { motion } from 'framer-motion';
import { 
  FiMonitor, 
  FiUsers, 
  FiAward, 
  FiLayout, 
  FiBarChart2, 
  FiCheck, 
  FiBookOpen,
  FiSmartphone
} from 'react-icons/fi';

const features = [
  {
    icon: <FiMonitor size={32} className="text-primary-400" />,
    title: 'Dasbor Terpersonalisasi',
    description: 'Akses cepat ke semua kursus, progres, dan rekomendasi yang disesuaikan dengan minat belajar Anda.',
  },
  {
    icon: <FiBookOpen size={32} className="text-coral-400" />,
    title: 'Katalog Kursus Beragam',
    description: 'Pilihan kursus berkualitas tinggi dalam berbagai bidang dan tingkat keahlian.',
  },
  {
    icon: <FiUsers size={32} className="text-mint-400" />,
    title: 'Pembelajaran Sosial',
    description: 'Berkolaborasi dengan peserta lain melalui forum diskusi, grup belajar, dan proyek tim.',
  },
  {
    icon: <FiAward size={32} className="text-primary-400" />,
    title: 'Sertifikasi Profesional',
    description: 'Dapatkan sertifikat setelah menyelesaikan kursus.',
  },
  {
    icon: <FiBarChart2 size={32} className="text-mint-400" />,
    title: 'Analitik Pembelajaran',
    description: 'Pantau kemajuan belajar Anda dengan insights mendalam dan visualisasi yang jelas.',
  },
  {
    icon: <FiSmartphone size={32} className="text-primary-400" />,
    title: 'Mobile Learning',
    description: 'Belajar di mana saja dan kapan saja dengan aplikasi mobile yang responsif dan offline mode.',
  },
];

const FeaturesSection = () => {
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.5,
      },
    },
  };

  return (
    <section id="features" className="py-20">
      <div className="container mx-auto px-4 md:px-8">
        <motion.div 
          className="mx-auto mb-16 max-w-3xl text-center"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
        >
          <h2 className="mb-4 font-poppins text-3xl font-bold md:text-4xl">
            Fitur Unggulan ROTASI
          </h2>
          <p className="text-lg text-neutral-600 dark:text-neutral-300">
            Platform pembelajaran modern dengan segala kebutuhan untuk pengalaman belajar yang optimal
          </p>
        </motion.div>

        <motion.div 
          className="grid gap-8 sm:grid-cols-2 lg:grid-cols-3"
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true }}
        >
          {features.map((feature, index) => (
            <motion.div
              key={index}
              variants={itemVariants}
              className="rounded-xl border border-neutral-200 bg-white p-6 shadow-sm transition-all hover:shadow-md dark:border-neutral-800 dark:bg-neutral-800/50"
            >
              <div className="mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-neutral-100 dark:bg-neutral-700">
                {feature.icon}
              </div>
              <h3 className="mb-2 font-poppins text-lg font-semibold">
                {feature.title}
              </h3>
              <p className="text-neutral-600 dark:text-neutral-300">
                {feature.description}
              </p>
            </motion.div>
          ))}
        </motion.div>
      </div>
    </section>
  );
};

export default FeaturesSection;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\sections\HeroSection.tsx ==== 
'use client';

import { useRef } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { motion } from 'framer-motion';
import Button from '@/components/ui/Button';
import { FiArrowRight, FiPlay, FiX } from 'react-icons/fi';

const HeroSection = () => {
  const videoRef = useRef<HTMLDialogElement>(null);

  const openVideo = () => {
    if (videoRef.current) {
      videoRef.current.showModal();
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
      },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.5,
      },
    },
  };

  return (
    <section className="relative overflow-hidden bg-gradient-to-b from-primary-50 to-white pb-16 pt-32 dark:from-neutral-900 dark:to-neutral-800">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 left-1/2 h-[800px] w-[800px] -translate-x-1/2 rounded-full bg-gradient-to-br from-primary-400/10 to-primary-500/30 blur-3xl filter dark:from-primary-400/5 dark:to-primary-500/10"></div>
      </div>

      <div className="container relative mx-auto grid gap-12 px-4 md:px-8 lg:grid-cols-2 lg:gap-8">
        <motion.div
          className="flex flex-col justify-center"
          variants={containerVariants}
          initial="hidden"
          animate="visible"
        >
          <motion.div variants={itemVariants} className="mb-4 inline-block rounded-full bg-primary-100 px-4 py-1 text-sm font-medium text-primary-600 dark:bg-primary-900/30 dark:text-primary-400">
            Platform LMS Generasi Baru
          </motion.div>
          <motion.h1 
            variants={itemVariants} 
            className="mb-6 font-poppins text-4xl font-bold leading-tight tracking-tight md:text-5xl lg:text-6xl"
          >
            Belajar Tanpa Batas di 
            <span className="bg-gradient-to-r from-primary-400 to-primary-600 bg-clip-text text-transparent">
              {' '}ROTASI
            </span>
          </motion.h1>
          <motion.p variants={itemVariants} className="mb-8 text-lg text-neutral-600 dark:text-neutral-300">
            Platform pembelajaran komprehensif yang dirancang untuk memaksimalkan potensi belajar mengajar di era digital. Akses kursus berkualitas tinggi kapan saja, di mana saja.
          </motion.p>
          <motion.div variants={itemVariants} className="flex flex-wrap gap-4">
            <Link href="/register">
              <Button size="lg" className="group rounded-xl">
                Mulai Sekarang
                <FiArrowRight className="ml-2 transition-transform group-hover:translate-x-1" />
              </Button>
            </Link>
            <Button 
              variant="outline" 
              size="lg" 
              onClick={openVideo}
              className="group rounded-xl"
            >
              <FiPlay className="mr-2 text-primary-400" />
              Tonton Demo
            </Button>
          </motion.div>
          <motion.div variants={itemVariants} className="mt-8 flex items-center text-sm text-neutral-500 dark:text-neutral-400">
            <div className="flex -space-x-2">
              {[1, 2, 3, 4, 5].map((i) => (
                <div 
                  key={i} 
                  className="h-8 w-8 overflow-hidden rounded-full border-2 border-white dark:border-neutral-800"
                >
                  <div className={`h-full w-full bg-primary-${i * 100}`}></div>
                </div>
              ))}
            </div>
            <span className="ml-4">
              Bergabung dengan <span className="font-bold">10,000+</span> pelajar
            </span>
          </motion.div>
        </motion.div>

        <motion.div 
          className="relative flex items-center justify-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ 
            duration: 0.8,
            delay: 0.5
          }}
        >
          <div className="relative h-[400px] w-full overflow-hidden rounded-xl shadow-floating md:h-[500px]">
            <div className="absolute inset-0 bg-gradient-to-br from-primary-100 to-mint-100 dark:from-primary-900/30 dark:to-mint-900/30"></div>
            <div className="relative h-full w-full">
              <Image
                src="/images/dashboard-preview.png"
                alt="ROTASI LMS Dashboard Preview"
                fill
                style={{ objectFit: 'contain' }}
                className="p-4"
              />
            </div>
          </div>
          {/* Decoration elements */}
          <div className="absolute -right-6 -top-6 h-20 w-20 rounded-lg bg-mint-400/20 backdrop-blur-md"></div>
          <div className="absolute -bottom-8 -left-8 h-16 w-16 rounded-lg bg-coral-400/20 backdrop-blur-md"></div>
          <div className="absolute bottom-12 right-12 h-12 w-12 animate-float rounded-full bg-primary-400/20 backdrop-blur-md"></div>
        </motion.div>
      </div>

      {/* Video Dialog */}
      <dialog
        ref={videoRef}
        className="rounded-lg bg-transparent p-0 backdrop:bg-neutral-900/80"
        onClick={(e) => {
          if (e.target === videoRef.current) {
            videoRef.current?.close();
          }
        }}
      >
        <div className="relative max-w-3xl">
          <button
            onClick={() => videoRef.current?.close()}
            className="absolute -right-3 -top-3 flex h-8 w-8 items-center justify-center rounded-full bg-white text-neutral-800 shadow-md"
          >
            <FiX />
          </button>
          <div className="aspect-video w-full overflow-hidden rounded-lg">
            {/* Replace with actual video element */}
            <div className="flex h-full w-full items-center justify-center bg-neutral-800 p-4 text-white">
              Video demo ROTASI LMS
            </div>
          </div>
        </div>
      </dialog>
    </section>
  );
};

export default HeroSection;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\sections\TestimonialsSection.tsx ==== 
'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Image from 'next/image';
import { FiChevronLeft, FiChevronRight } from 'react-icons/fi';

const testimonials = [
  {
    id: 1,
    content: 'ROTASI mengubah cara saya belajar coding. Antarmuka yang intuitif dan jalur pembelajaran yang terstruktur membantu saya menjadi developer web dalam waktu kurang dari 6 bulan.',
    name: 'Ahmad Fauzi',
    title: 'Frontend Developer',
    avatar: '/images/avatar-1.jpg',
  },
  {
    id: 2,
    content: 'Sebagai instruktur, saya sangat terkesan dengan kemudahan pembuatan kursus di ROTASI. Tools dan analitik yang disediakan sangat membantu untuk meningkatkan kualitas kursus saya.',
    name: 'Dina Maulida',
    title: 'UX Design Instructor',
    avatar: '/images/avatar-2.jpg',
  },
  {
    id: 3,
    content: 'Sistem sertifikasi ROTASI diakui di perusahaan kami. Beberapa karyawan terbaik kami adalah lulusan dari kursus intensif ROTASI Learning Management System.',
    name: 'Budi Santoso',
    title: 'HR Manager at TechCorp',
    avatar: '/images/avatar-3.jpg',
  },
  {
    id: 4,
    content: 'Fleksibilitas belajar di ROTASI sangat cocok dengan jadwal saya yang padat. Saya bisa belajar kapan saja, di mana saja, bahkan offline dengan fitur download materi.',
    name: 'Sinta Wijaya',
    title: 'Marketing Professional',
    avatar: '/images/avatar-4.jpg',
  },
];

const TestimonialsSection = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAutoplay, setIsAutoplay] = useState(true);
  
  const nextTestimonial = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % testimonials.length);
  };
  
  const prevTestimonial = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + testimonials.length) % testimonials.length);
  };

  useEffect(() => {
    if (!isAutoplay) return;
    
    const interval = setInterval(() => {
      nextTestimonial();
    }, 5000);
    
    return () => clearInterval(interval);
  }, [isAutoplay, currentIndex]);
  
  const pauseAutoplay = () => setIsAutoplay(false);
  
  return (
    <section id="testimonials" className="py-20">
      <div className="container mx-auto px-4 md:px-8">
        <motion.div 
          className="mx-auto mb-16 max-w-3xl text-center"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
        >
          <h2 className="mb-4 font-poppins text-3xl font-bold md:text-4xl">
            Apa Kata Mereka
          </h2>
          <p className="text-lg text-neutral-600 dark:text-neutral-300">
            Pengalaman dari pengguna yang telah merasakan manfaat belajar di ROTASI
          </p>
        </motion.div>

        <div className="relative mx-auto max-w-4xl">
          <div 
            className="overflow-hidden rounded-2xl bg-white p-6 shadow-lg dark:bg-neutral-800 md:p-10"
            onMouseEnter={pauseAutoplay}
            onTouchStart={pauseAutoplay}
          >
            <AnimatePresence mode="wait">
              <motion.div
                key={currentIndex}
                initial={{ opacity: 0, x: 100 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -100 }}
                transition={{ duration: 0.5 }}
                className="flex flex-col items-center text-center"
              >
                <div className="mb-6 h-20 w-20 overflow-hidden rounded-full border-4 border-primary-100 dark:border-primary-900">
                  <Image
                    src={testimonials[currentIndex].avatar}
                    alt={testimonials[currentIndex].name}
                    width={80}
                    height={80}
                    className="h-full w-full object-cover"
                  />
                </div>
                <p className="mb-6 text-lg italic text-neutral-700 dark:text-neutral-300 md:text-xl">
                  "{testimonials[currentIndex].content}"
                </p>
                <h4 className="font-poppins text-lg font-semibold">
                  {testimonials[currentIndex].name}
                </h4>
                <p className="text-neutral-500 dark:text-neutral-400">
                  {testimonials[currentIndex].title}
                </p>
              </motion.div>
            </AnimatePresence>
          </div>

          {/* Navigation Controls */}
          <div className="mt-8 flex justify-center gap-4">
            <button
              onClick={prevTestimonial}
              className="flex h-10 w-10 items-center justify-center rounded-full border border-neutral-200 text-neutral-500 transition-colors hover:bg-primary-50 hover:text-primary-500 dark:border-neutral-700 dark:hover:bg-neutral-800 dark:hover:text-primary-400"
              aria-label="Previous testimonial"
            >
              <FiChevronLeft size={20} />
            </button>
            <div className="flex items-center gap-2">
              {testimonials.map((_, index) => (
                <button
                  key={index}
                  onClick={() => {
                    setCurrentIndex(index);
                    setIsAutoplay(false);
                  }}
                  className={`h-2.5 w-2.5 rounded-full transition-all ${
                    index === currentIndex
                      ? 'bg-primary-500 w-6'
                      : 'bg-neutral-300 dark:bg-neutral-600'
                  }`}
                  aria-label={`Go to testimonial ${index + 1}`}
                />
              ))}
            </div>
            <button
              onClick={nextTestimonial}
              className="flex h-10 w-10 items-center justify-center rounded-full border border-neutral-200 text-neutral-500 transition-colors hover:bg-primary-50 hover:text-primary-500 dark:border-neutral-700 dark:hover:bg-neutral-800 dark:hover:text-primary-400"
              aria-label="Next testimonial"
            >
              <FiChevronRight size={20} />
            </button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default TestimonialsSection;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\ui\Button.tsx ==== 
import { ButtonHTMLAttributes, ReactNode } from 'react';

type ButtonProps = {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  className?: string;
} & ButtonHTMLAttributes<HTMLButtonElement>;

const Button = ({
  children,
  variant = 'primary',
  size = 'md',
  fullWidth = false,
  className = '',
  ...props
}: ButtonProps) => {
  const baseStyle = 'inline-flex items-center justify-center rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-primary-400 focus:ring-offset-2 dark:focus:ring-offset-neutral-900';
  
  const variantStyles = {
    primary: 'bg-primary-400 text-white hover:bg-primary-500 active:bg-primary-600',
    secondary: 'bg-coral-400 text-white hover:bg-coral-500 active:bg-coral-600',
    outline: 'border border-neutral-300 bg-transparent text-neutral-800 hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-200 dark:hover:bg-neutral-800',
    ghost: 'bg-transparent text-neutral-800 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-neutral-800',
  };
  
  const sizeStyles = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-lg',
  };
  
  const widthStyle = fullWidth ? 'w-full' : '';
  
  return (
    <button
      className={`${baseStyle} ${variantStyles[variant]} ${sizeStyles[size]} ${widthStyle} ${className}`}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\ui\EmptyState.tsx ==== 
// src/components/ui/EmptyState.tsx
import { ReactNode } from "react";
import Link from "next/link";
import Button from "@/components/ui/Button";

type EmptyStateProps = {
  icon: ReactNode;
  title: string;
  description: string;
  actionLabel?: string;
  actionLink?: string;
  onAction?: () => void;
  className?: string;
};

const EmptyState = ({
  icon,
  title,
  description,
  actionLabel,
  actionLink,
  onAction,
  className = "",
}: EmptyStateProps) => {
  return (
    <div className={`rounded-lg border border-dashed border-neutral-300 bg-neutral-50 p-8 text-center dark:border-neutral-700 dark:bg-neutral-800/50 ${className}`}>
      <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-neutral-100 dark:bg-neutral-800">
        {icon}
      </div>
      <h3 className="mb-2 text-lg font-medium">{title}</h3>
      <p className="mb-6 max-w-md mx-auto text-neutral-500 dark:text-neutral-400">
        {description}
      </p>
      
      {actionLabel && (
        actionLink ? (
          <Link href={actionLink}>
            <Button>{actionLabel}</Button>
          </Link>
        ) : onAction ? (
          <Button onClick={onAction}>{actionLabel}</Button>
        ) : null
      )}
    </div>
  );
};

export default EmptyState;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\ui\LoadingIndicator.tsx ==== 
// src/components/ui/LoadingIndicator.tsx
type LoadingIndicatorProps = {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
};

const LoadingIndicator = ({ 
  size = 'md', 
  className = ''
}: LoadingIndicatorProps) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12',
  };

  return (
    <div 
      className={`animate-spin rounded-full border-2 border-primary-400 border-t-transparent ${sizeClasses[size]} ${className}`}
      aria-label="Loading"
    />
  );
};

export default LoadingIndicator;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\ui\Logo.tsx ==== 
import Link from 'next/link';

const Logo = ({ className = '' }: { className?: string }) => {
  return (
    <Link href="/" className={`flex items-center ${className}`}>
      <span className="flex items-center">
        <span className="mr-1 block h-10 w-10 rounded-lg bg-gradient-to-br from-primary-400 to-primary-600 transition-all"></span>
        <span className="font-poppins text-2xl font-bold tracking-tight">
          ROT<span className="text-primary-400">A</span>SI
        </span>
      </span>
    </Link>
  );
};

export default Logo;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\ui\StatCard.tsx ==== 
// src/components/ui/StatCard.tsx
import { ReactNode } from 'react';

type StatCardProps = {
  icon: ReactNode;
  title: string;
  value: string | number;
  className?: string;
};

const StatCard = ({ icon, title, value, className = '' }: StatCardProps) => {
  return (
    <div className={`rounded-lg border border-neutral-200 bg-white p-5 shadow-sm transition-all hover:shadow-md dark:border-neutral-700 dark:bg-neutral-800 ${className}`}>
      <div className="mb-2 flex h-10 w-10 items-center justify-center rounded-full bg-neutral-100 dark:bg-neutral-700">
        {icon}
      </div>
      <p className="text-sm text-neutral-600 dark:text-neutral-400">{title}</p>
      <p className="text-2xl font-bold">{value}</p>
    </div>
  );
};

export default StatCard;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\components\ui\Toaster.tsx ==== 
// src/components/ui/Toaster.tsx
'use client';

import { useState, useEffect, createContext, useContext, ReactNode } from 'react';
import { FiAlertCircle, FiCheckCircle, FiInfo, FiX } from 'react-icons/fi';

type ToastType = 'success' | 'error' | 'info';

type Toast = {
  id: string;
  type: ToastType;
  message: string;
};

type ToastContextType = {
  showToast: (message: string, type: ToastType) => void;
};

const ToastContext = createContext<ToastContextType | undefined>(undefined);

export const useToast = () => {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
};

export const ToastProvider = ({ children }: { children: ReactNode }) => {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const showToast = (message: string, type: ToastType) => {
    const id = Math.random().toString(36).substring(2, 9);
    setToasts((prev) => [...prev, { id, type, message }]);
  };

  const removeToast = (id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id));
  };

  return (
    <ToastContext.Provider value={{ showToast }}>
      {children}
      <div className="fixed bottom-4 right-4 z-50 flex flex-col gap-2">
        {toasts.map((toast) => (
          <ToastItem key={toast.id} toast={toast} onClose={() => removeToast(toast.id)} />
        ))}
      </div>
    </ToastContext.Provider>
  );
};

const ToastItem = ({ toast, onClose }: { toast: Toast; onClose: () => void }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose();
    }, 5000);

    return () => clearTimeout(timer);
  }, [onClose]);

  const { type, message } = toast;

  const icons = {
    success: <FiCheckCircle className="text-green-500" size={18} />,
    error: <FiAlertCircle className="text-red-500" size={18} />,
    info: <FiInfo className="text-blue-500" size={18} />,
  };

  const backgrounds = {
    success: 'bg-green-50 dark:bg-green-900/20',
    error: 'bg-red-50 dark:bg-red-900/20',
    info: 'bg-blue-50 dark:bg-blue-900/20',
  };

  const borders = {
    success: 'border-green-200 dark:border-green-800',
    error: 'border-red-200 dark:border-red-800',
    info: 'border-blue-200 dark:border-blue-800',
  };

  return (
    <div
      className={`flex w-72 items-center justify-between rounded-lg border p-3 shadow-md ${backgrounds[type]} ${borders[type]} animate-in slide-in-from-right`}
    >
      <div className="flex items-center gap-2">
        {icons[type]}
        <p className="text-sm text-neutral-800 dark:text-neutral-200">{message}</p>
      </div>
      <button
        onClick={onClose}
        className="text-neutral-500 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-200"
      >
        <FiX size={16} />
      </button>
    </div>
  );
};

export const Toaster = () => {
  return null; // This component is just for convenience when importing
};==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\contexts\AuthContext.tsx ==== 
// src/contexts/AuthContext.tsx
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import { setCookie, deleteCookie } from 'cookies-next';

export type User = {
  id: number;
  username: string;
  email: string;
  full_name: string;
  role: string;
  department: string;
  avatar_url?: string;
  created_at: string;
  updated_at?: string;
};

type AuthContextType = {
  user: User | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  login: (email: string, password: string, rememberMe: boolean) => Promise<{success: boolean, message?: string}>;
  logout: () => void;
  refreshUserData: () => Promise<void>;
  refreshTokens: () => Promise<boolean>;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const router = useRouter();

  // Setup auth interceptor for handling token expiry
  const setupAuthInterceptor = () => {
    if (typeof window === 'undefined') return;
    
    const originalFetch = window.fetch;
    window.fetch = async (...args) => {
      let [url, options = {}] = args;
      
      const token = localStorage.getItem('accessToken');
      
      // Add token to request headers if available
      if (token && options.headers) {
        options.headers = {
          ...options.headers,
          Authorization: `Bearer ${token}`
        };
      } else if (token) {
        options.headers = {
          Authorization: `Bearer ${token}`
        };
      }
      
      try {
        const response = await originalFetch(url, options);
        
        // Handle 401 (Unauthorized) responses
        if (response.status === 401) {
          const refreshSuccessful = await refreshTokens();
          
          // If refresh was successful, retry original request with new token
          if (refreshSuccessful) {
            const newToken = localStorage.getItem('accessToken');
            if (options.headers) {
              options.headers = {
                ...options.headers,
                Authorization: `Bearer ${newToken}`
              };
            } else {
              options.headers = {
                Authorization: `Bearer ${newToken}`
              };
            }
            return originalFetch(url, options);
          } else {
            // If refresh failed, logout and redirect
            logout();
            return response;
          }
        }
        
        return response;
      } catch (error) {
        return Promise.reject(error);
      }
    };
  };
  
  // Function to refresh access token using refresh token
  const refreshTokens = async (): Promise<boolean> => {
    try {
      if (typeof window === 'undefined') return false;
      
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) return false;

      const response = await fetch('http://localhost:5000/api/auth/refresh-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refreshToken })
      });

      const data = await response.json();

      if (response.ok && data.success) {
        localStorage.setItem('accessToken', data.accessToken);
        setCookie('accessToken', data.accessToken, { maxAge: 60 * 60 * 24 });
        return true;
      } else {
        // If refresh failed, clear tokens
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        deleteCookie('accessToken');
        deleteCookie('refreshToken');
        return false;
      }
    } catch (error) {
      console.error('Token refresh error:', error);
      return false;
    }
  };

  useEffect(() => {
    // Check if user is logged in on mount
    const checkAuth = async () => {
      if (typeof window === 'undefined') {
        setIsLoading(false);
        return;
      }
      
      const token = localStorage.getItem('accessToken');
      if (!token) {
        setIsLoading(false);
        return;
      }

      try {
        // Setup fetch interceptor for auto token refresh
        setupAuthInterceptor();

        const response = await fetch('http://localhost:5000/api/auth/me', {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (response.ok) {
          const data = await response.json();
          setUser(data.user);
        } else if (response.status === 401) {
          // Try to refresh token if unauthorized
          const refreshed = await refreshTokens();
          if (!refreshed) {
            // If refresh failed, clear tokens
            localStorage.removeItem('accessToken');
            localStorage.removeItem('refreshToken');
            deleteCookie('accessToken');
            deleteCookie('refreshToken');
          } else {
            // If refresh successful, try fetching user data again
            const newToken = localStorage.getItem('accessToken');
            const retryResponse = await fetch('http://localhost:5000/api/auth/me', {
              headers: { Authorization: `Bearer ${newToken}` }
            });
            
            if (retryResponse.ok) {
              const data = await retryResponse.json();
              setUser(data.user);
            } else {
              // If still unsuccessful, clear tokens
              localStorage.removeItem('accessToken');
              localStorage.removeItem('refreshToken');
              deleteCookie('accessToken');
              deleteCookie('refreshToken');
            }
          }
        }
      } catch (error) {
        console.error('Auth check error:', error);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string, rememberMe: boolean) => {
    try {
      const response = await fetch('http://localhost:5000/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });

      const data = await response.json();

      if (response.ok && data.success) {
        // Store tokens
        localStorage.setItem('accessToken', data.accessToken);
        localStorage.setItem('refreshToken', data.refreshToken);
        
        // Also set cookies for middleware
        setCookie('accessToken', data.accessToken, { maxAge: 60 * 60 * 24 });
        setCookie('refreshToken', data.refreshToken, { maxAge: 60 * 60 * 24 * 30 });
        
        // Remember email if option is selected
        if (rememberMe) {
          localStorage.setItem('rememberedEmail', email);
        } else {
          localStorage.removeItem('rememberedEmail');
        }
        
        // Set user data
        setUser(data.user);
        
        // Setup fetch interceptor
        setupAuthInterceptor();
        
        return { success: true };
      }
      return { success: false, message: data.message || "Email atau password tidak valid" };
    } catch (error) {
      console.error('Login error:', error);
      return { success: false, message: "Terjadi kesalahan koneksi ke server" };
    }
  };

  const logout = () => {
    try {
      if (typeof window === 'undefined') return;
      
      const refreshToken = localStorage.getItem('refreshToken');
      
      // Call logout API if refresh token exists
      if (refreshToken) {
        fetch('http://localhost:5000/api/auth/logout', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ refreshToken })
        }).catch(err => console.error('Logout API error:', err));
      }
      
      // Clear local storage and cookies
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
      deleteCookie('accessToken');
      deleteCookie('refreshToken');
      
      // Clear user state
      setUser(null);
      
      // Redirect to login
      router.push('/login');
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  const refreshUserData = async () => {
    if (typeof window === 'undefined') return;
    
    const token = localStorage.getItem('accessToken');
    if (!token) return;

    try {
      const response = await fetch('http://localhost:5000/api/auth/me', {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (response.ok) {
        const data = await response.json();
        setUser(data.user);
      }
    } catch (error) {
      console.error('Refresh user data error:', error);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        isAuthenticated: !!user,
        login,
        logout,
        refreshUserData,
        refreshTokens
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\hooks\api\useApi.ts ==== 
// src/hooks/api/useApi.ts
import { useState, useCallback } from 'react';
import { useAuth } from '@/contexts/AuthContext';

const API_BASE_URL = 'http://localhost:5000/api';

export function useApi() {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const { refreshTokens } = useAuth();

  const fetchData = useCallback(async (
    endpoint: string,
    options: RequestInit = {}
  ) => {
    try {
      setIsLoading(true);
      setError(null);

      const token = localStorage.getItem('accessToken');
      const headers = {
        'Content-Type': 'application/json',
        ...(token ? { 'Authorization': `Bearer ${token}` } : {}),
        ...options.headers,
      };

      const url = endpoint.startsWith('http') ? endpoint : `${API_BASE_URL}${endpoint}`;
      
      let response = await fetch(url, { ...options, headers });
      
      // Handle token expiration
      if (response.status === 401) {
        const refreshSuccessful = await refreshTokens();
        
        if (refreshSuccessful) {
          // Retry with new token
          const newToken = localStorage.getItem('accessToken');
          const retryHeaders = {
            ...headers,
            'Authorization': `Bearer ${newToken}`,
          };
          
          response = await fetch(url, { ...options, headers: retryHeaders });
        } else {
          throw new Error('Sesi Anda telah berakhir. Silakan login kembali.');
        }
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Terjadi kesalahan saat memuat data');
      }
      
      const result = await response.json();
      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Terjadi kesalahan yang tidak diketahui';
      setError(errorMessage);
      console.error('API error:', err);
      return null;
    } finally {
      setIsLoading(false);
    }
  }, [refreshTokens]);

  const mutateData = useCallback(async (
    endpoint: string,
    method: 'POST' | 'PUT' | 'DELETE' = 'POST',
    body?: any,
    options: RequestInit = {}
  ) => {
    return fetchData(endpoint, {
      method,
      body: body ? JSON.stringify(body) : undefined,
      ...options,
    });
  }, [fetchData]);

  return {
    isLoading,
    error,
    fetchData,
    mutateData,
  };
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\hooks\api\useDashboardData.ts ==== 
// src/hooks/api/useDashboardData.ts
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useToast } from '@/components/ui/Toaster';
import { useApi } from './useApi';

export const useDashboardData = (authUser: any) => {
  const router = useRouter();
  const { showToast } = useToast();
  const { fetchData, isLoading: apiLoading } = useApi();
  
  const [user, setUser] = useState<any>(null);
  const [dashboardStats, setDashboardStats] = useState<any>({});
  const [enrolledCourses, setEnrolledCourses] = useState<any[]>([]);
  const [notifications, setNotifications] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    fetchDashboardData();
  }, [authUser]);

  const fetchDashboardData = async () => {
    try {
      setIsLoading(true);
      setError("");
      
      const token = localStorage.getItem("accessToken");

      if (!token) {
        router.push("/login");
        return;
      }

      // Use auth user if available, otherwise fetch from API
      const userData = authUser
        ? { user: authUser }
        : await fetchUserData(token);
        
      if (!userData) return;

      setUser(userData.user);

      // Fetch additional dashboard data in parallel
      const [statsData, coursesData, notificationsData] = await Promise.all([
        fetchData("/users/stats/dashboard"),
        fetchData("/courses/enrolled"),
        fetchData("/notifications?limit=5")
      ]);

      // Process stats data
      if (statsData) {
        setDashboardStats(statsData.data || {});
      }

      // Process enrolled courses
      if (coursesData) {
        setEnrolledCourses(coursesData.data?.enrollments || []);
      }

      // Process notifications
      if (notificationsData) {
        setNotifications(notificationsData.data?.notifications || []);
      }
    } catch (error) {
      console.error("Dashboard data fetch error:", error);
      setError("Terjadi kesalahan saat memuat data dashboard");
      showToast("Error loading dashboard data", "error");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper function to fetch user data
  const fetchUserData = async (token: string) => {
    try {
      const userData = await fetchData("/auth/me");
      return userData;
    } catch (error) {
      console.error("User data fetch error:", error);
      return null;
    }
  };

  return {
    user,
    dashboardStats,
    enrolledCourses,
    notifications,
    isLoading: isLoading || apiLoading,
    error,
    refetchDashboardData: fetchDashboardData
  };
};==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\lib\reactQuery.ts ==== 
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: 1,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\redux\store.ts ==== 
import { configureStore } from '@reduxjs/toolkit';
import themeReducer from './features/themeSlice';

export const store = configureStore({
  reducer: {
    theme: themeReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\redux\features\themeSlice.ts ==== 
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

type ThemeState = {
  darkMode: boolean;
};

// Initial state that works on both server and client
const initialState: ThemeState = {
  darkMode: false, // Default value, will be updated on client-side
};

export const themeSlice = createSlice({
  name: 'theme',
  initialState,
  reducers: {
    toggleTheme: (state) => {
      state.darkMode = !state.darkMode;
      
      // Only modify DOM if in browser environment
      if (typeof window !== 'undefined') {
        if (state.darkMode) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        localStorage.setItem('darkMode', state.darkMode.toString());
      }
    },
    setTheme: (state, action: PayloadAction<boolean>) => {
      state.darkMode = action.payload;
      
      // Only modify DOM if in browser environment
      if (typeof window !== 'undefined') {
        if (action.payload) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        localStorage.setItem('darkMode', action.payload.toString());
      }
    },
  },
});

export const { toggleTheme, setTheme } = themeSlice.actions;
export default themeSlice.reducer;==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\types\category.ts ==== 
// src/types/category.ts
export interface Category {
  id: number;
  name: string;
  description: string;
  parent_category_id: number | null;
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\types\course.ts ==== 
// src/types/course.ts

export interface Lesson {
  id: number;
  title: string;
  content_type: string;
  content_text?: string;
  content_url?: string;
  duration_minutes: number;
  module_id: number;
  quiz?: Quiz;
  progress?: LessonProgress;
}

export interface Quiz {
  id: number;
  title: string;
  passing_score: number;
  time_limit_minutes: number;
  questionCount?: number;
}

export interface Module {
  id: number;
  title: string;
  description?: string;
  order_number: number;
  course_id: number;
  lessons?: Lesson[];
}

export interface Course {
  id: number;
  title: string;
  description: string;
  instructor: {
    id: number;
    full_name: string;
    avatar_url?: string;
  };
  enrollmentStatus?: {
    enrolled: boolean;
    status?: string;
  };
  modules?: Module[];
}

export interface LessonProgress {
  status: 'not_started' | 'in_progress' | 'completed';
  last_accessed?: string;
  time_spent_minutes: number;
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\types\user.ts ==== 
// src/types/user.ts
export interface User {
  id: number;
  full_name: string;
  username: string;
  email: string;
  department: string;
  role: string;
  avatar_url?: string;
  created_at: string;
  updated_at?: string;
  last_login?: string;
}

export interface UserFormData {
  full_name: string;
  username: string;
  email: string;
  department: string;
}

export interface PasswordData {
  currentPassword: string;
  newPassword: string;
  confirmPassword: string;
}==== C:\Users\junior.wibisono\Documents\rotasi-lms\client\src\utils\date.ts ==== 
// src/utils/date.ts
export const formatDate = (date: string | Date, options?: Intl.DateTimeFormatOptions): string => {
  const defaultOptions: Intl.DateTimeFormatOptions = {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  };
  
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  
  return dateObj.toLocaleDateString('id-ID', options || defaultOptions);
};

export const formatDateTime = (date: string | Date): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  
  return dateObj.toLocaleDateString('id-ID', {
    day: 'numeric',
    month: 'short',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
};

export const timeAgo = (date: string | Date): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  const now = new Date();
  
  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000);
  const diffInMinutes = Math.floor(diffInSeconds / 60);
  const diffInHours = Math.floor(diffInMinutes / 60);
  const diffInDays = Math.floor(diffInHours / 24);
  
  if (diffInSeconds < 60) {
    return 'Baru saja';
  } else if (diffInMinutes < 60) {
    return `${diffInMinutes} menit yang lalu`;
  } else if (diffInHours < 24) {
    return `${diffInHours} jam yang lalu`;
  } else if (diffInDays < 7) {
    return `${diffInDays} hari yang lalu`;
  } else {
    return formatDate(dateObj, { day: 'numeric', month: 'short', year: 'numeric' });
  }
};